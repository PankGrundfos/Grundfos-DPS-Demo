[
    {
        "id": "2db3774.f99f488",
        "type": "tab",
        "label": "MAGNA3 Backend",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ac69f322.1bb2c",
        "type": "tab",
        "label": "Overall Pump Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8e025641.d38868",
        "type": "tab",
        "label": "Simulation Page",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ef4d3c17.ae27b",
        "type": "tab",
        "label": "Fault Page",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b066e7c5.874fa8",
        "type": "tab",
        "label": "Valve Overview",
        "disabled": false,
        "info": ""
    },
    {
        "id": "651c65ba.af2eec",
        "type": "tab",
        "label": "Valve Backend",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a006c3c.49c7b4",
        "type": "tab",
        "label": "FlowMeter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "dff53b0e.d3f2c8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f973084d.a2c5f8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#11497b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#11497b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#11497b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1a71be",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#11497b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "DPS Demo Unit",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8dd78c30.ffe35",
        "type": "ui_group",
        "name": "Configuration",
        "tab": "c2200288.0e6cd",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "562c0b41.4f5f24",
        "type": "modbus-client",
        "name": "MAGNA3",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "169.254.215.180",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/tmp/modbus",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "19200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 10000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "2a42b678.b2f55a",
        "type": "ui_tab",
        "name": "MAGNA3 Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "806379db.c33df8",
        "type": "ui_group",
        "name": "Controls",
        "tab": "2a42b678.b2f55a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ab3a9e02.8ace9",
        "type": "ui_group",
        "name": "Configuration",
        "tab": "2a42b678.b2f55a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1eed226c.4ab33e",
        "type": "ui_group",
        "name": "Head and Flow",
        "tab": "2a42b678.b2f55a",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2635b728.9e6d88",
        "type": "ui_group",
        "name": "Status",
        "tab": "2a42b678.b2f55a",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "39f5b403.20849c",
        "type": "ui_group",
        "name": "Info",
        "tab": "2a42b678.b2f55a",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "25ba43c.34f63bc",
        "type": "ui_tab",
        "name": "Warning, Alarms and Faults",
        "icon": "fa-bell",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bd33570d.7d8268",
        "type": "ui_group",
        "name": "Warning / Alarm",
        "tab": "25ba43c.34f63bc",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3256df1b.4a908",
        "type": "ui_group",
        "name": "Faults",
        "tab": "25ba43c.34f63bc",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "26881754.b529d8",
        "type": "ui_group",
        "name": "Simulation",
        "tab": "25ba43c.34f63bc",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3c1be052.4e291",
        "type": "ui_group",
        "name": "Control Simulation ",
        "tab": "ea9b6de0.2693d",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ea9b6de0.2693d",
        "type": "ui_tab",
        "name": "Simulations",
        "icon": "fa-thermometer-2",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e9d68c7e.c2fed",
        "type": "ui_group",
        "name": "Visualizations",
        "tab": "ea9b6de0.2693d",
        "order": 4,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "a1c8c13.98bb94",
        "type": "ui_group",
        "name": "Water Use",
        "tab": "ea9b6de0.2693d",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c3b98441.243208",
        "type": "sqlitedb",
        "db": ".node-red/MAGNA3",
        "mode": "RWC"
    },
    {
        "id": "3be2a9e5.53a7f6",
        "type": "ui_group",
        "name": "Database",
        "tab": "ea9b6de0.2693d",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "276147dc.e6e7f8",
        "type": "modbus-client",
        "name": "RTU MAGNA3",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "19200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "100",
        "unit_id": 17,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "99f00951.c27168",
        "type": "modbusSerialConfig",
        "d": true,
        "port": "/dev/ttyUSB0",
        "baud": "38400",
        "data": "8",
        "parity": "even",
        "stop": "1",
        "name": "Test MAGNA3 RTU"
    },
    {
        "id": "c2200288.0e6cd",
        "type": "ui_tab",
        "name": "Valve Overview",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e26629c0.74cc58",
        "type": "ui_group",
        "name": "Valve Control",
        "tab": "c2200288.0e6cd",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7185a1fe.34f35",
        "type": "ui_group",
        "name": "Data",
        "tab": "c2200288.0e6cd",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bb2dbcc9.07f63",
        "type": "ui_group",
        "name": "Pump Data",
        "tab": "c2200288.0e6cd",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d97a3a3.5b566c8",
        "type": "ui_group",
        "name": "Temperatures",
        "tab": "ea9b6de0.2693d",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5bc5e1ec.4bddf",
        "type": "ui_group",
        "name": "Pump Status",
        "tab": "ea9b6de0.2693d",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8911427a.03002",
        "type": "ui_group",
        "name": "Pump Duty Point",
        "tab": "ea9b6de0.2693d",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ebb8f692.86f908",
        "type": "ui_group",
        "name": "help and information",
        "tab": "ea9b6de0.2693d",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "38d14db9.3d4dd2",
        "type": "ui_group",
        "name": "Duty Point",
        "tab": "2a42b678.b2f55a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8443a485.7acdd8",
        "type": "ui_group",
        "name": "Valve Position",
        "tab": "ea9b6de0.2693d",
        "order": 10,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a09ba203.8376",
        "type": "ui_group",
        "name": "Power and RPM",
        "tab": "ea9b6de0.2693d",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c070ecdb.6d5ce",
        "type": "ui_group",
        "z": "dff53b0e.d3f2c8",
        "name": "Click",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "5"
    },
    {
        "id": "84e42c64.70197",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "248473c9.d2f6bc",
        "type": "ui_group",
        "name": "Gauges",
        "tab": "2a42b678.b2f55a",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1eb8925b.30627e",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "128",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "129",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 710,
        "y": 940,
        "wires": [
            [
                "f3cf7cc8.38aca"
            ],
            [
                "f3cf7cc8.38aca"
            ],
            [
                "f3cf7cc8.38aca"
            ],
            [
                "f3cf7cc8.38aca"
            ],
            [
                "f3cf7cc8.38aca"
            ],
            [
                "f3cf7cc8.38aca"
            ],
            [
                "89619b4a.0b0dd8"
            ],
            [
                "89619b4a.0b0dd8"
            ]
        ]
    },
    {
        "id": "89619b4a.0b0dd8",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 980,
        "wires": [
            [
                "8be0eace.e76598"
            ]
        ]
    },
    {
        "id": "f3cf7cc8.38aca",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 940,
        "wires": [
            [
                "8be0eace.e76598"
            ]
        ]
    },
    {
        "id": "534d0654.746c68",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "control_mode",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "31635b24.918074",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "calc set point display",
        "func": "var set_point = msg.payload/10000;\nvar select = global.get(\"control_mode\");\nvar display = 0;\n\n//Constant Speed / Curve\nif (select === 0){\n    var sensor_min = global.get(\"min_freq\")\n    display = parseFloat((set_point*100).toFixed(1));\n    if (display < sensor_min){\n        display = sensor_min\n    } \n    msg.payload = display+\" %\"\n}\n\n//Constant freq / curve\nif (select === 1){\n    var sensor_min = global.get(\"min_freq\")\n    display = parseFloat((set_point*100).toFixed(1));\n    if (display < sensor_min){\n        display = sensor_min\n    } \n    msg.payload = display+\" %\"\n}\n\n\n// Constant Head\nelse if (select == 3){\n    var min = global.get(\"min_head\")\n    var max = global.get(\"max_head\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max*sensor_max\n    var r_min = max*sensor_min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n\n    msg.payload = display+\" m\"\n    \n}\n\n// Constant Pressure\nelse if (select == 4){\n    var min = global.get(\"min_head\")\n    var max = global.get(\"max_head\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max*sensor_max\n    var r_min = max*sensor_min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n    \n    msg.payload = display+\" m\"\n    \n}\n\n// Const. Diff. Press.\nelse if (select == 5){\n    var min = global.get(\"min_head\")\n    var max = global.get(\"max_head\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max*sensor_max\n    var r_min = max*sensor_min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n\n    msg.payload = display+\" m\"\n}\n\n// Prop. Pres\nelse if (select == 6){\n    var min = global.get(\"min_head\")\n    var max = global.get(\"max_head\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max*sensor_max\n    var r_min = max*sensor_min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n\n    msg.payload = display+\" m\"\n    \n}\n\n// Constant Flow\nelse if (select == 7){\n    var min = global.get(\"min_flow\")\n    var max = global.get(\"max_flow\")\n    var unit = global.get(\"unit\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max*sensor_max\n    var r_min = max*sensor_min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n    if (unit == 6){\n    msg.payload = display+\" m<sup>3</sup>/h\"\n    }\n    else if (unit == 7){\n    msg.payload = display+\" m<sup>3</sup>/s\"    \n    }\n    else if (unit == 8){\n    msg.payload = display+\" L/s\"    \n    }\n    else if (unit == 9){\n    msg.payload = display+\" GPM\"    \n    }\n    else {\n    msg.payload = display\n    }\n}\n\n// Constant Temp\nelse if (select == 8){\n    var min = global.get(\"min_temp\")\n    var max = global.get(\"max_temp\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max\n    var r_min = min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n    msg.payload = display+\" &deg C\"\n    \n}\n\n// Constant Diff Temp\nelse if (select == 9){\n    var min = global.get(\"min_temp\")\n    var max = global.get(\"max_temp\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max\n    var r_min = min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n    msg.payload = display+\" &deg C\"\n    \n}\n\n// Constant Pressure\nelse if (select == 10){\n    var min = global.get(\"min_head\")\n    var max = global.get(\"max_head\")\n    var sensor_min = global.get(\"sensor_min\")\n    var sensor_max = global.get(\"sensor_max\")\n    \n    var r_max = max*sensor_max\n    var r_min = max*sensor_min\n    \n    tmp = set_point*(r_max-r_min)+r_min\n    display =  parseFloat((tmp).toFixed(1));\n    if (display < r_min){\n        display = r_min\n    }\n    \n    msg.payload = display+\" m\"\n    \n}\n\nelse {\n    msg.payload = 0\n}\n\nglobal.set(\"set_point\",display)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1660,
        "y": 880,
        "wires": [
            [
                "aaa117d1.5b0ae8"
            ]
        ]
    },
    {
        "id": "8a61102d.50b6a",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "BMS_ONOFF",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 400,
        "wires": [
            [
                "e82255e9.4b3548"
            ]
        ]
    },
    {
        "id": "fdca0392.e30f3",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "START_STOP",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 460,
        "wires": [
            [
                "e82255e9.4b3548"
            ]
        ]
    },
    {
        "id": "5de4da55.41ff24",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "FLOWLIMIT",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 540,
        "wires": [
            [
                "e82255e9.4b3548"
            ]
        ]
    },
    {
        "id": "639ffd87.ff4884",
        "type": "inject",
        "z": "2db3774.f99f488",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "44809e2.ef8bc6",
                "6cf118bf.8efcf8"
            ]
        ]
    },
    {
        "id": "b166e97f.fcf748",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "msg.payload = parseFloat((msg.payload / 100).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 620,
        "wires": [
            [
                "dae4e79c.2fcab8"
            ]
        ]
    },
    {
        "id": "17617508.717e2b",
        "type": "modbus-write",
        "z": "8e025641.d38868",
        "d": true,
        "name": "FC6 108 Feedback Sensor",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "108",
        "quantity": "1",
        "server": "276147dc.e6e7f8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1180,
        "y": 1720,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4e2b3ef9.c5ab7",
        "type": "ui_slider",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "label": "Occupancy ",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 9,
        "width": "4",
        "height": "1",
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 810,
        "y": 1160,
        "wires": [
            [
                "527f5617.17e358",
                "b584fcd8.da1c2"
            ]
        ]
    },
    {
        "id": "527f5617.17e358",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "d": true,
        "group": "3c1be052.4e291",
        "order": 11,
        "width": "2",
        "height": "1",
        "name": "Load Setting Display",
        "label": "",
        "format": "{{msg.payload | uppercase}} %",
        "layout": "row-left",
        "x": 1220,
        "y": 1180,
        "wires": []
    },
    {
        "id": "2cc2a262.00c6be",
        "type": "ui_switch",
        "z": "8e025641.d38868",
        "d": true,
        "name": "Sim_ON_OFF",
        "label": "Stop / Start",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "start",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "stop",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 220,
        "y": 2100,
        "wires": [
            [
                "37a240a8.2a56b",
                "6e7b67e.169bf98",
                "1a41372d.070429"
            ]
        ]
    },
    {
        "id": "6ce46225.466d9c",
        "type": "traffic",
        "z": "8e025641.d38868",
        "name": "",
        "property_allow": "payload",
        "filter_allow": "start",
        "ignore_case_allow": true,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "payload",
        "filter_stop": "stop",
        "ignore_case_stop": true,
        "negate_stop": false,
        "send_stop": false,
        "default_start": false,
        "differ": false,
        "x": 690,
        "y": 1760,
        "wires": [
            [
                "7d668a69.ac5654",
                "1c6fb3a4.4974cc"
            ]
        ]
    },
    {
        "id": "7d668a69.ac5654",
        "type": "change",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Sensor",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 1700,
        "wires": [
            [
                "17617508.717e2b",
                "ef1a27bb.ab8658"
            ]
        ]
    },
    {
        "id": "4da1a82c.5497a8",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "Coil Power ",
        "func": "var status = global.get(\"coil_status\")/100\n\nvar p1 = 7.84e3\nvar p2 = 9.346e-15\nvar q1 = 2/3\nq = msg.payload*0.277778\nmsg.payload = (((p1*q+p2)/(q+q1))*2)*status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1550,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "cc551212.e15ec",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "Return Water Temp",
        "func": "var p = msg.payload\nvar q = global.get(\"Flow\")*0.00028; //water Flow, assumed to be constant\nvar Tw_s = flow.get(\"Tw_s\") || 10;\nvar Ts = flow.get(\"Ts\") || 2;\nvar Tw_r = flow.get(\"Tw_r\") || 10;\nvar rho = 997\nvar V = 0.09  // m3, volume of water \nvar M = V*rho  // Mass of water volumne\nvar c = 4182  // water heat storage capacity\nvar C = M*c  // Thermal Capacity of Coil\n\nvar dot_T = (-q*rho*c*(Tw_r-Tw_s)+p)/C\n\nvar T = Tw_r+dot_T*Ts\n\nflow.set(\"Tw_r\",T)\nmsg.Tw_r = T\nmsg.payload = parseFloat(T).toFixed(2);\nmsg.topic = \"water\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1900,
        "wires": [
            [
                "9634441f.02a058",
                "6563a96e.3c5808"
            ]
        ]
    },
    {
        "id": "f9b47b7a.8ce028",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "Tw_r",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "Ta_s",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "T",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "8a3ac641.64a2b8",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "Supply Air Temp",
        "func": "var p = msg.payload\nvar q = 2.5; //Air Flow, assumed to be constant\n//var q = 2;\nvar O = flow.get('occupancy')\n//var q = 3-((O)/100)*1; \nflow.set('q_air',q)\nvar Ta_s = flow.get(\"Ta_s\") || 28;\nvar Ts = flow.get(\"Ts\") || 2\nvar Ta_r = flow.get(\"Ta_r\") || 28\nvar rho = 1.225\nvar V = 80  // m3, volume of ahu \nvar M = V*rho  // Mass of air volumne\nvar c = 1000  // air heat storage capacity\nvar C = M*c  // Thermal Capacity of Coil\n\nvar dot_T = (q*rho*c*(Ta_r-Ta_s)-p)/C\n\nvar T = Ta_s+dot_T*Ts\n\nflow.set(\"Ta_s\",T)\nmsg.Ta_s = T\nmsg.payload = parseFloat(T).toFixed(2);\nmsg.topic = \"air\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1980,
        "wires": [
            [
                "687b1b48.367654",
                "76d45005.bef82",
                "2cfc9e27.5879f2",
                "2e13de3b.fdcb62",
                "26bc4a80.a02816",
                "e0337605.c6a948"
            ]
        ]
    },
    {
        "id": "b584fcd8.da1c2",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "load calc",
        "func": "var setting = msg.payload;\nvar Ta_r = 28-((100-msg.payload)/100)*4;\nflow.set(\"Ta_r\",Ta_r)\n\nmsg.payload = parseFloat(Ta_r).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1280,
        "wires": [
            [
                "f03f8095.fdd05"
            ]
        ]
    },
    {
        "id": "2cfc9e27.5879f2",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "e9d68c7e.c2fed",
        "order": 3,
        "width": "3",
        "height": "1",
        "name": "Supply Air Temp",
        "label": "SUT",
        "format": "{{msg.payload}} &deg C",
        "layout": "row-spread",
        "x": 2200,
        "y": 2080,
        "wires": []
    },
    {
        "id": "9634441f.02a058",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "e9d68c7e.c2fed",
        "order": 4,
        "width": "3",
        "height": "1",
        "name": "Return Water Temp",
        "label": "RWT",
        "format": "{{msg.payload}} &deg C",
        "layout": "row-spread",
        "x": 2230,
        "y": 1960,
        "wires": []
    },
    {
        "id": "f03f8095.fdd05",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "d": true,
        "group": "3c1be052.4e291",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Return Air ",
        "format": "{{msg.payload}} &deg C",
        "layout": "row-spread",
        "x": 1440,
        "y": 1280,
        "wires": []
    },
    {
        "id": "3b8b86bb.c5568a",
        "type": "ui_button",
        "z": "8e025641.d38868",
        "name": "",
        "group": "3c1be052.4e291",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "stop",
        "payloadType": "str",
        "topic": "",
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "f9b47b7a.8ce028",
                "ba7905db.dd2498",
                "37a240a8.2a56b"
            ]
        ]
    },
    {
        "id": "687b1b48.367654",
        "type": "function",
        "z": "8e025641.d38868",
        "d": true,
        "name": "Sensor To Global",
        "func": "var min = global.get(\"min_temp\")\nvar max = global.get(\"max_temp\")\n\n//min = -10\n//max = 130\n\nvar sensor = ((msg.Ta_s-min)/(max-min))*10000\nsensor = parseFloat(sensor).toFixed(0);\nmsg.payload = sensor\nglobal.set(\"Sensor\",sensor)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 2180,
        "wires": [
            [
                "f93a390e.8dbc88"
            ]
        ]
    },
    {
        "id": "e9afd974.d52af8",
        "type": "inject",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "stop",
        "payloadType": "str",
        "x": 150,
        "y": 1720,
        "wires": [
            [
                "2cc2a262.00c6be"
            ]
        ]
    },
    {
        "id": "edac14d9.038058",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "alarm_reset",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 320,
        "wires": [
            [
                "c6d14b9d.0d5668",
                "e82255e9.4b3548"
            ]
        ]
    },
    {
        "id": "f24593ec.9a736",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Copy_Local",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "e82255e9.4b3548"
            ]
        ]
    },
    {
        "id": "fafecfca.338f9",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "Copy_Local",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 220,
        "wires": [
            [
                "e82255e9.4b3548"
            ]
        ]
    },
    {
        "id": "c6d14b9d.0d5668",
        "type": "delay",
        "z": "2db3774.f99f488",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 830,
        "y": 280,
        "wires": [
            [
                "da6abbcc.afd8b8"
            ]
        ]
    },
    {
        "id": "da6abbcc.afd8b8",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alarm_reset",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 280,
        "wires": [
            [
                "e82255e9.4b3548"
            ]
        ]
    },
    {
        "id": "e82255e9.4b3548",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "var binary = [0, 0, 0, 0,0, 0, 0, 0,0, 0, 0, 0,0, 0, 0, 0]\n\nbinary[0] = global.get(\"BMS_ONOFF\")\nbinary[1] = global.get(\"START_STOP\");\nbinary[2] = global.get(\"alarm_reset\")\nbinary[4] = global.get(\"Copy_Local\")\n\nbinary[5] = global.get(\"FLOWLIMIT\");\n\nvar index = 0\nvar sum = 0\n\nfor (var i in binary){\n    if (index===0){\n        sum = binary[0]\n    }\n    else{\n    sum = sum+Math.pow(2*binary[index],index);\n    }\n    index = index+1\n}\nmsg.payload = sum\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 380,
        "wires": [
            [
                "bf7df91a.aa9e48",
                "927f3da9.624ca"
            ]
        ]
    },
    {
        "id": "bf7df91a.aa9e48",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1450,
        "y": 360,
        "wires": []
    },
    {
        "id": "ee3e0172.d4ce",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 360,
        "wires": [
            [
                "fafecfca.338f9"
            ]
        ]
    },
    {
        "id": "44809e2.ef8bc6",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "Copy_Local",
                "pt": "global",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "alarm_reset",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "243c8ef6.441742",
        "type": "comment",
        "z": "2db3774.f99f488",
        "name": "Temp Sim Flow",
        "info": "",
        "x": 400,
        "y": 700,
        "wires": []
    },
    {
        "id": "69c6232e.720bcc",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "1bae50b.64892af"
        ],
        "x": 395,
        "y": 1900,
        "wires": [
            [
                "6ce46225.466d9c"
            ]
        ]
    },
    {
        "id": "fe5a10e7.5c9e4",
        "type": "ui_slider",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "label": "Coil Efficiency ",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 12,
        "width": "4",
        "height": "1",
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 820,
        "y": 1080,
        "wires": [
            [
                "6a0923eb.346dbc",
                "545cb8bf.3f5548"
            ]
        ]
    },
    {
        "id": "611c47c2.2cb538",
        "type": "inject",
        "z": "8e025641.d38868",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "4e2b3ef9.c5ab7",
                "fe5a10e7.5c9e4",
                "f86635c1.b63258"
            ]
        ]
    },
    {
        "id": "6a0923eb.346dbc",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "d": true,
        "group": "3c1be052.4e291",
        "order": 13,
        "width": "2",
        "height": "1",
        "name": "Coil Status display",
        "label": "",
        "format": "{{msg.payload | uppercase}} %",
        "layout": "row-left",
        "x": 1230,
        "y": 1080,
        "wires": []
    },
    {
        "id": "545cb8bf.3f5548",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "coil_status",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f93a390e.8dbc88",
        "type": "debug",
        "z": "8e025641.d38868",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1460,
        "y": 2180,
        "wires": []
    },
    {
        "id": "ef1a27bb.ab8658",
        "type": "debug",
        "z": "8e025641.d38868",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1250,
        "y": 1660,
        "wires": []
    },
    {
        "id": "898a8787.453288",
        "type": "comment",
        "z": "2db3774.f99f488",
        "name": "MAGNA3 Write Section",
        "info": "",
        "x": 280,
        "y": 40,
        "wires": []
    },
    {
        "id": "3c7958b6.971e68",
        "type": "ui_template",
        "z": "2db3774.f99f488",
        "group": "806379db.c33df8",
        "name": "Header Logo (and clock)",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<script id=\"clockScript1\" type=\"text/javascript\">\n    var clockInterval;\n    $(function () {\n        if (clockInterval) return;\n\n        //add logo\n        var div1 = $('<div/>');\n        var logo = new Image();\n\n        logo.src = '/logo_old.png'\n        logo.height = 45;\n        div1[0].style.margin = '5px';\n\n        div1.append(logo);\n\n        //add clock\n        var div2 = $('<div/>');\n        var p = $('<p/>');\n\n        div2.append(p);\n        div2[0].style.margin = '10px auto';\n        \n        var div3 = $('<div/>');\n        div3[0].style.margin = '10px auto';\n        function displayTime() {\n            p.text(new Date().toLocaleString());\n        }\n        \n        clockInterval = setInterval(displayTime, 1000);\n\n        //add to toolbar when it's available\n        var addToToolbarTimer;\n        \n        function addToToolbar() {\n            var toolbar = $('.md-toolbar-tools');\n            \n            if(!toolbar.length) return;\n            \n            toolbar.append(div3);\n            toolbar.append(div1);\n            clearInterval(addToToolbarTimer);\n        }\n        addToToolbarTimer = setInterval(addToToolbar, 100);\n    });\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d3900acc.f38e08",
        "type": "ui_chart",
        "z": "ac69f322.1bb2c",
        "name": "Flow Chart",
        "group": "1eed226c.4ab33e",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Pump Flow",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1210,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c60b8e53.ff4c4",
        "type": "ui_chart",
        "z": "ac69f322.1bb2c",
        "name": "Head Chart",
        "group": "1eed226c.4ab33e",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "Pump Head",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "12",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1210,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d827839b.9ff47",
        "type": "ui_gauge",
        "z": "ac69f322.1bb2c",
        "name": "RPM",
        "group": "248473c9.d2f6bc",
        "order": 5,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "RPM",
        "format": "{{msg.payload.data[0] | uppercase}}",
        "min": "1300",
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "4c362ea4.e8226",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "1eed226c.4ab33e",
        "order": 1,
        "width": "3",
        "height": "1",
        "name": "Flow Meter",
        "label": "Flow M:",
        "format": "{{msg.payload}} m<sup>3</sup>/h",
        "layout": "row-spread",
        "x": 1190,
        "y": 20,
        "wires": []
    },
    {
        "id": "a01fca68.7c3ac8",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "1eed226c.4ab33e",
        "order": 2,
        "width": "3",
        "height": "1",
        "name": "Flow Pump",
        "label": "Flow P:",
        "format": "{{msg.payload}} m<sup>3</sup>/h",
        "layout": "row-spread",
        "x": 1190,
        "y": 80,
        "wires": []
    },
    {
        "id": "ae1dd684.ba6b08",
        "type": "ui_gauge",
        "z": "ac69f322.1bb2c",
        "name": "kW Gauge",
        "group": "248473c9.d2f6bc",
        "order": 6,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "W",
        "format": "{{msg.payload.data[0] | uppercase}}",
        "min": "0",
        "max": "400",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1210,
        "y": 440,
        "wires": []
    },
    {
        "id": "c6e33991.fb6168",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Actual SetPoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2040,
        "y": 560,
        "wires": []
    },
    {
        "id": "2271cc95.fbbdc4",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Actual FlowLimit",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2040,
        "y": 620,
        "wires": []
    },
    {
        "id": "e39b1a0e.2f9f78",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "39f5b403.20849c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Opperation Hours",
        "format": "{{msg.payload.data[0]}}",
        "layout": "row-spread",
        "x": 1230,
        "y": 760,
        "wires": []
    },
    {
        "id": "def44a3e.5f0488",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "39f5b403.20849c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Powered Hours",
        "format": "{{msg.payload.data[0]}}",
        "layout": "row-spread",
        "x": 1220,
        "y": 820,
        "wires": []
    },
    {
        "id": "51c90ad9.fabfc4",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "39f5b403.20849c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "# Start/Stop",
        "format": "{{msg.payload.data[0]}}",
        "layout": "row-spread",
        "x": 1210,
        "y": 880,
        "wires": []
    },
    {
        "id": "24838558.5880ea",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "39f5b403.20849c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "# kWh",
        "format": "{{msg.payload.data[0]}}",
        "layout": "row-spread",
        "x": 1190,
        "y": 940,
        "wires": []
    },
    {
        "id": "d1a5cb4a.0d5708",
        "type": "ui_gauge",
        "z": "ac69f322.1bb2c",
        "name": "liquid temp",
        "group": "248473c9.d2f6bc",
        "order": 7,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "Liquid Temp",
        "format": "{{msg.payload | uppercase}}",
        "min": "-10",
        "max": "130",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "ffd1ff6.a6597",
        "type": "ui_gauge",
        "z": "ac69f322.1bb2c",
        "name": "external sensor",
        "group": "248473c9.d2f6bc",
        "order": 8,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "{{msg.unit}}",
        "format": "{{msg.payload | uppercase}}",
        "min": "0",
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1220,
        "y": 560,
        "wires": []
    },
    {
        "id": "25ba9b9.03c8a64",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Remote Control:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2040,
        "y": 360,
        "wires": []
    },
    {
        "id": "a5161b51.bc4178",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Start / Stop:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2030,
        "y": 320,
        "wires": []
    },
    {
        "id": "8913c25d.3332b",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "FlowLIMIT:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2030,
        "y": 440,
        "wires": []
    },
    {
        "id": "4a0734cc.bbf08c",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Faults:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2010,
        "y": 280,
        "wires": []
    },
    {
        "id": "6818eb56.b0dfc4",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Warnings:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2020,
        "y": 240,
        "wires": []
    },
    {
        "id": "f08677a5.42ebd8",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Forced Local:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2040,
        "y": 180,
        "wires": []
    },
    {
        "id": "14e43b19.e0f2f5",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Control Mode",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2040,
        "y": 500,
        "wires": []
    },
    {
        "id": "742c8921.2942c8",
        "type": "ui_toast",
        "z": "ac69f322.1bb2c",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Min Max Notification",
        "x": 2060,
        "y": 120,
        "wires": []
    },
    {
        "id": "eef25f1c.86c85",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "6a78dfc7.208aa",
            "58632b83.e1d234"
        ],
        "x": 1695,
        "y": 120,
        "wires": [
            [
                "742c8921.2942c8"
            ]
        ]
    },
    {
        "id": "a63ea07a.1a378",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "dca9c0f6.c7b0e",
            "1fadf318.46e1ed"
        ],
        "x": 1695,
        "y": 180,
        "wires": [
            [
                "f08677a5.42ebd8"
            ]
        ]
    },
    {
        "id": "b6c263fc.66af4",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "f3556b6d.15c328",
            "f46a8567.549198"
        ],
        "x": 1695,
        "y": 240,
        "wires": [
            [
                "6818eb56.b0dfc4"
            ]
        ]
    },
    {
        "id": "e6fe31ec.1ef64",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "5dd5ebda.0fbc24",
            "4ebac14b.accb"
        ],
        "x": 1695,
        "y": 280,
        "wires": [
            [
                "4a0734cc.bbf08c"
            ]
        ]
    },
    {
        "id": "d050f301.08c17",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "e8521bba.edeff8",
            "bcbd680d.1e2548"
        ],
        "x": 1695,
        "y": 320,
        "wires": [
            [
                "a5161b51.bc4178"
            ]
        ]
    },
    {
        "id": "b355970c.434768",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "e9e83e7f.4bc83",
            "c43ad46c.b5cd28"
        ],
        "x": 1695,
        "y": 360,
        "wires": [
            [
                "25ba9b9.03c8a64"
            ]
        ]
    },
    {
        "id": "b29dc9a3.7e9a38",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "683bc76a.1f89a8",
            "d4962b58.4ec068"
        ],
        "x": 1695,
        "y": 440,
        "wires": [
            [
                "8913c25d.3332b"
            ]
        ]
    },
    {
        "id": "e339adc6.00ad9",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "a6485d81.d9d4a",
            "482a08b1.c5d5b8"
        ],
        "x": 1695,
        "y": 500,
        "wires": [
            [
                "14e43b19.e0f2f5"
            ]
        ]
    },
    {
        "id": "9d5ff59a.5a1228",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "369cdd9f.add602",
            "6b8133e4.28bc2c",
            "d1dc324f.0537"
        ],
        "x": 1695,
        "y": 560,
        "wires": [
            [
                "c6e33991.fb6168"
            ]
        ]
    },
    {
        "id": "d5e80157.46e43",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "13396b70.3389d5",
            "eb684cac.c2877",
            "80a06905.9cdd48"
        ],
        "x": 1695,
        "y": 640,
        "wires": [
            [
                "2271cc95.fbbdc4"
            ]
        ]
    },
    {
        "id": "8797e79e.b8d688",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "252ddd9d.8abac2",
            "4c319f9a.650f9",
            "c6e8cf65.2e104"
        ],
        "x": 1055,
        "y": 760,
        "wires": [
            [
                "e39b1a0e.2f9f78"
            ]
        ]
    },
    {
        "id": "bb4857d2.b3e7a8",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "c6bf9ea9.8b428",
            "fe5446b2.1d3828",
            "f3e41dee.89e38"
        ],
        "x": 1055,
        "y": 820,
        "wires": [
            [
                "def44a3e.5f0488"
            ]
        ]
    },
    {
        "id": "7fa1c887.7d2b48",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "2c4026ac.a9da5a",
            "31298a84.03f4c6",
            "5c05d8d2.b61be8"
        ],
        "x": 1055,
        "y": 880,
        "wires": [
            [
                "51c90ad9.fabfc4"
            ]
        ]
    },
    {
        "id": "64953541.94fbbc",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "cc1a7f34.17336",
            "2443457d.72f21a",
            "a090ac1f.41ecd"
        ],
        "x": 1055,
        "y": 940,
        "wires": [
            [
                "24838558.5880ea"
            ]
        ]
    },
    {
        "id": "bcc42950.24ede8",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "fd18d18e.75773",
            "f5c4fb46.8f2e88",
            "6e89ac88.ae7414"
        ],
        "x": 1075,
        "y": 140,
        "wires": [
            [
                "d827839b.9ff47"
            ]
        ]
    },
    {
        "id": "e020e671.030c08",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "a2b59264.1bd93",
            "8c809dae.e3377",
            "2545240f.33092c"
        ],
        "x": 915,
        "y": 220,
        "wires": [
            [
                "d3900acc.f38e08",
                "a01fca68.7c3ac8"
            ]
        ]
    },
    {
        "id": "9771af97.932c1",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "aef19316.51085",
            "4cf4b66c.14e348",
            "d3f2e4b2.919ad8"
        ],
        "x": 1075,
        "y": 320,
        "wires": [
            [
                "c60b8e53.ff4c4"
            ]
        ]
    },
    {
        "id": "a3f905a9.acf678",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "f1be094c.54d548",
            "d6bfd62d.c07ba8",
            "f5cbe01d.8fd82"
        ],
        "x": 1075,
        "y": 440,
        "wires": [
            [
                "ae1dd684.ba6b08"
            ]
        ]
    },
    {
        "id": "8c26bd71.cff38",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "f889a947.f21cb8",
            "5583a882.7d57d8",
            "330ffcc5.b40e24"
        ],
        "x": 1075,
        "y": 500,
        "wires": [
            [
                "d1a5cb4a.0d5708"
            ]
        ]
    },
    {
        "id": "98c7076e.9889e8",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "2e9106f.01a50fa",
            "cc7dd57b.ad8308",
            "ccbb84fe.5bd638"
        ],
        "x": 1075,
        "y": 560,
        "wires": [
            [
                "ffd1ff6.a6597"
            ]
        ]
    },
    {
        "id": "dae4e79c.2fcab8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Flow Limit Display",
        "links": [
            "b335a69b.55d138"
        ],
        "x": 1610,
        "y": 720,
        "wires": [],
        "l": true
    },
    {
        "id": "aaa117d1.5b0ae8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "SetPoint Display",
        "links": [
            "af5a93ac.a4135",
            "eea59598.ab6048"
        ],
        "x": 1940,
        "y": 880,
        "wires": [],
        "l": true
    },
    {
        "id": "6f6c7a3e.e3f874",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "d": true,
        "group": "ab3a9e02.8ace9",
        "order": 6,
        "width": "2",
        "height": "1",
        "name": "Flow Limit Display",
        "label": "",
        "format": "{{msg.payload | uppercase}} m<sup>3</sup>/h",
        "layout": "row-left",
        "x": 610,
        "y": 1420,
        "wires": []
    },
    {
        "id": "91dd20a8.8e825",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "ab3a9e02.8ace9",
        "order": 9,
        "width": "2",
        "height": "1",
        "name": "Set Point Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 1620,
        "wires": []
    },
    {
        "id": "b335a69b.55d138",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "dae4e79c.2fcab8"
        ],
        "x": 355,
        "y": 1420,
        "wires": [
            [
                "6f6c7a3e.e3f874"
            ]
        ]
    },
    {
        "id": "eea59598.ab6048",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "aaa117d1.5b0ae8"
        ],
        "x": 355,
        "y": 1620,
        "wires": [
            [
                "91dd20a8.8e825"
            ]
        ]
    },
    {
        "id": "3bc512cd.6e595e",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "Copy To local",
        "links": [
            "a3ab0206.bfc04"
        ],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "f24593ec.9a736"
            ]
        ],
        "l": true
    },
    {
        "id": "bdd178d1.a558f8",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "Reset Alarms",
        "links": [
            "a3916ca9.e1031"
        ],
        "x": 310,
        "y": 300,
        "wires": [
            [
                "edac14d9.038058"
            ]
        ],
        "l": true
    },
    {
        "id": "81cd1210.30a95",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "BMS ON/OFF",
        "links": [
            "32c89a66.b32156"
        ],
        "x": 310,
        "y": 360,
        "wires": [
            [
                "ee3e0172.d4ce",
                "8a61102d.50b6a"
            ]
        ],
        "l": true
    },
    {
        "id": "71c0c49c.47a00c",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "GO / STOP",
        "links": [
            "dd510898.341cd8"
        ],
        "x": 310,
        "y": 420,
        "wires": [
            [
                "fdca0392.e30f3"
            ]
        ],
        "l": true
    },
    {
        "id": "85715eeb.746f6",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "Enable FlowLimit",
        "links": [
            "2a9f478a.e2a5c8"
        ],
        "x": 320,
        "y": 480,
        "wires": [
            [
                "5de4da55.41ff24"
            ]
        ],
        "l": true
    },
    {
        "id": "45c127f0.038e68",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "Set FlowLimit",
        "links": [
            "38aff79f.8ad6c8"
        ],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "b166e97f.fcf748",
                "f2dbf1b.fff161"
            ]
        ],
        "l": true
    },
    {
        "id": "a9181825.713128",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "Set Control Mode",
        "links": [
            "7d4a3929.da1008"
        ],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "1eb8925b.30627e",
                "534d0654.746c68",
                "1212e6ca.3c8709"
            ]
        ],
        "l": true
    },
    {
        "id": "8be0eace.e76598",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Default Set Point",
        "links": [
            "5d477702.f65da8"
        ],
        "x": 1215,
        "y": 980,
        "wires": []
    },
    {
        "id": "18405476.592f2c",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "OUTPUT set Setpoint",
        "links": [
            "52353989.0b7498",
            "53cb02d3.0747bc",
            "cc39cac7.c24b38"
        ],
        "x": 1420,
        "y": 940,
        "wires": [
            [
                "31635b24.918074",
                "9f440d7d.0b7ff"
            ]
        ],
        "l": true
    },
    {
        "id": "8e5bf23c.67aeb",
        "type": "ui_slider",
        "z": "ac69f322.1bb2c",
        "d": true,
        "name": "",
        "label": "Set Point",
        "tooltip": "",
        "group": "ab3a9e02.8ace9",
        "order": 7,
        "width": "4",
        "height": "1",
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "10000",
        "step": "1",
        "x": 520,
        "y": 1540,
        "wires": [
            [
                "52353989.0b7498"
            ]
        ]
    },
    {
        "id": "52353989.0b7498",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "Set SetPoint",
        "links": [
            "18405476.592f2c"
        ],
        "x": 730,
        "y": 1540,
        "wires": [],
        "l": true
    },
    {
        "id": "5d477702.f65da8",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "Default SetPoint",
        "links": [
            "8be0eace.e76598"
        ],
        "x": 135,
        "y": 1540,
        "wires": [
            [
                "8e5bf23c.67aeb"
            ]
        ]
    },
    {
        "id": "5f4c28a1.1d76d8",
        "type": "ui_switch",
        "z": "ac69f322.1bb2c",
        "d": true,
        "name": "",
        "label": "Start Stop",
        "tooltip": "",
        "group": "806379db.c33df8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 440,
        "y": 320,
        "wires": [
            [
                "dd510898.341cd8"
            ]
        ]
    },
    {
        "id": "515384a7.60609c",
        "type": "ui_switch",
        "z": "ac69f322.1bb2c",
        "name": "",
        "label": "Enable Flow Limit",
        "tooltip": "",
        "group": "ab3a9e02.8ace9",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 550,
        "y": 1120,
        "wires": [
            [
                "2a9f478a.e2a5c8"
            ]
        ]
    },
    {
        "id": "aa232748.cef578",
        "type": "ui_switch",
        "z": "ac69f322.1bb2c",
        "d": true,
        "name": "BMS_ONOFF",
        "label": "BMS Control",
        "tooltip": "",
        "group": "806379db.c33df8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "32c89a66.b32156"
            ]
        ]
    },
    {
        "id": "15e073de.0b7acc",
        "type": "ui_slider",
        "z": "ac69f322.1bb2c",
        "d": true,
        "name": "",
        "label": "Flow Limit",
        "tooltip": "",
        "group": "ab3a9e02.8ace9",
        "order": 5,
        "width": "4",
        "height": "1",
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": "0",
        "max": "1600",
        "step": "1",
        "x": 400,
        "y": 1360,
        "wires": [
            [
                "38aff79f.8ad6c8"
            ]
        ]
    },
    {
        "id": "f462b897.4f0508",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "",
        "group": "806379db.c33df8",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset Alarms",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "x": 460,
        "y": 100,
        "wires": [
            [
                "a3916ca9.e1031"
            ]
        ]
    },
    {
        "id": "54f85f6b.a0d15",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "",
        "group": "806379db.c33df8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Copy to Local",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "x": 460,
        "y": 40,
        "wires": [
            [
                "a3ab0206.bfc04"
            ]
        ]
    },
    {
        "id": "a3ab0206.bfc04",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "Copy To local",
        "links": [
            "3bc512cd.6e595e"
        ],
        "x": 655,
        "y": 40,
        "wires": []
    },
    {
        "id": "a3916ca9.e1031",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "Reset Alarms",
        "links": [
            "bdd178d1.a558f8"
        ],
        "x": 665,
        "y": 80,
        "wires": []
    },
    {
        "id": "32c89a66.b32156",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "BMS ON/OFF",
        "links": [
            "81cd1210.30a95"
        ],
        "x": 655,
        "y": 240,
        "wires": []
    },
    {
        "id": "dd510898.341cd8",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "GO/STOP",
        "links": [
            "71c0c49c.47a00c"
        ],
        "x": 655,
        "y": 300,
        "wires": []
    },
    {
        "id": "2a9f478a.e2a5c8",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "Enable FlowLimit",
        "links": [
            "85715eeb.746f6"
        ],
        "x": 735,
        "y": 1100,
        "wires": []
    },
    {
        "id": "38aff79f.8ad6c8",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "Set FlowLimit",
        "links": [
            "45c127f0.038e68"
        ],
        "x": 675,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4b2926b2.e81638",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "Sim Temp Flow",
        "links": [
            "c0b5ea83.594438"
        ],
        "x": 100,
        "y": 1000,
        "wires": [
            [
                "aa232748.cef578",
                "5f4c28a1.1d76d8",
                "a7272fa9.9c677",
                "32c89a66.b32156",
                "dd510898.341cd8",
                "26181a9.b3b52e6",
                "d09b7a42.f769f8"
            ]
        ],
        "l": true
    },
    {
        "id": "a7272fa9.9c677",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "Control Mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "8",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1200,
        "wires": [
            [
                "4ec6cf46.429a1"
            ]
        ]
    },
    {
        "id": "4ec6cf46.429a1",
        "type": "ui_dropdown",
        "z": "ac69f322.1bb2c",
        "name": "",
        "label": "Control Mode",
        "tooltip": "",
        "place": "Select option",
        "group": "ab3a9e02.8ace9",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Constant Curve",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Constant Head",
                "value": "3",
                "type": "str"
            },
            {
                "label": "Constant Presssure",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Constant Differential Pressure",
                "value": "5",
                "type": "str"
            },
            {
                "label": "Proportional Pressure",
                "value": "6",
                "type": "str"
            },
            {
                "label": "Constant Temperature",
                "value": "8",
                "type": "str"
            },
            {
                "label": "Differential Temperature",
                "value": "9",
                "type": "str"
            },
            {
                "label": "AUTOAdapt",
                "value": "128",
                "type": "str"
            },
            {
                "label": "FLOWAdapt",
                "value": "129",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 640,
        "y": 1200,
        "wires": [
            [
                "7d4a3929.da1008"
            ]
        ]
    },
    {
        "id": "7d4a3929.da1008",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "Control Mode",
        "links": [
            "a9181825.713128"
        ],
        "x": 795,
        "y": 1200,
        "wires": []
    },
    {
        "id": "6cf118bf.8efcf8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "initial Reset",
        "links": [
            "4ae842b.26ac6bc"
        ],
        "x": 495,
        "y": 180,
        "wires": []
    },
    {
        "id": "4ae842b.26ac6bc",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "Initial Reset",
        "links": [
            "6cf118bf.8efcf8"
        ],
        "x": 110,
        "y": 240,
        "wires": [
            [
                "aa232748.cef578",
                "5f4c28a1.1d76d8",
                "515384a7.60609c",
                "a913fb5f.c3c538",
                "32c89a66.b32156",
                "dd510898.341cd8",
                "d86741fa.07e67",
                "525f16bf.bd2c08",
                "2491361e.bc550a",
                "2052187a.6a0ba8"
            ]
        ],
        "l": true
    },
    {
        "id": "a184cc5.85b0a3",
        "type": "ui_chart",
        "z": "8e025641.d38868",
        "name": "Flow Chart",
        "group": "e9d68c7e.c2fed",
        "order": 5,
        "width": "6",
        "height": "6",
        "label": "Flow",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1330,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "733022fb.9aaa6c",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "e9d68c7e.c2fed",
        "order": 1,
        "width": "3",
        "height": "1",
        "name": "Flow Value",
        "label": "Flow:",
        "format": "{{msg.payload}} m<sup>3</sup>/h",
        "layout": "row-spread",
        "x": 1330,
        "y": 600,
        "wires": []
    },
    {
        "id": "78b73203.c60a2c",
        "type": "ui_chart",
        "z": "8e025641.d38868",
        "name": "Head Chart",
        "group": "e9d68c7e.c2fed",
        "order": 7,
        "width": "6",
        "height": "6",
        "label": "Head Chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "12",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1330,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f7fef7f8.fbc6b8",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "e9d68c7e.c2fed",
        "order": 2,
        "width": "3",
        "height": "1",
        "name": "Head Value",
        "label": "Head",
        "format": "{{msg.payload}} m",
        "layout": "row-spread",
        "x": 1330,
        "y": 700,
        "wires": []
    },
    {
        "id": "ab514648.863708",
        "type": "ui_gauge",
        "z": "8e025641.d38868",
        "name": "kW Gauge",
        "group": "a09ba203.8376",
        "order": 9,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "W",
        "format": "{{msg.payload.data[0] | uppercase}}",
        "min": "0",
        "max": "400",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1330,
        "y": 440,
        "wires": []
    },
    {
        "id": "1e2de285.e6ccad",
        "type": "ui_gauge",
        "z": "8e025641.d38868",
        "name": "RPM",
        "group": "a09ba203.8376",
        "order": 10,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "RPM",
        "format": "{{msg.payload.data[0] | uppercase}}",
        "min": "1300",
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1310,
        "y": 480,
        "wires": []
    },
    {
        "id": "8e65a676.a44a58",
        "type": "comment",
        "z": "8e025641.d38868",
        "name": "Simulation page",
        "info": "",
        "x": 1340,
        "y": 400,
        "wires": []
    },
    {
        "id": "bd43e05a.5a957",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "fd18d18e.75773",
            "f5c4fb46.8f2e88",
            "6e89ac88.ae7414"
        ],
        "x": 415,
        "y": 520,
        "wires": [
            [
                "1e2de285.e6ccad"
            ]
        ]
    },
    {
        "id": "a3c7b322.2011b",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "1bae50b.64892af"
        ],
        "x": 415,
        "y": 600,
        "wires": [
            [
                "a184cc5.85b0a3",
                "733022fb.9aaa6c",
                "56065ced.3ff764"
            ]
        ]
    },
    {
        "id": "af2ae29.e2f1c2",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "aef19316.51085",
            "4cf4b66c.14e348",
            "d3f2e4b2.919ad8"
        ],
        "x": 415,
        "y": 700,
        "wires": [
            [
                "f7fef7f8.fbc6b8",
                "3c952c4b.5337e4"
            ]
        ]
    },
    {
        "id": "e1d4a691.e20958",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "f1be094c.54d548",
            "d6bfd62d.c07ba8",
            "f5cbe01d.8fd82"
        ],
        "x": 415,
        "y": 480,
        "wires": [
            [
                "ab514648.863708"
            ]
        ]
    },
    {
        "id": "53cb02d3.0747bc",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Set SetPoint",
        "links": [
            "18405476.592f2c"
        ],
        "x": 1735,
        "y": 2500,
        "wires": []
    },
    {
        "id": "da848e1a.0683",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Sensor range",
        "func": "var unit = msg.payload.data[0]\nvar min = msg.payload.data[1]\nvar max = msg.payload.data[2]\nif (unit == 13){\n    \nmin_c = min-273;\nmax_c = max-273;\n\nglobal.set(\"min_temp\",min_c)\nglobal.set(\"max_temp\",max_c)\n\nmsg.min = min_c\nmsg.max = max_c\n}\n\nif (unit == 12){\n    \nmin_c = min;\nmax_c = max;\n\nglobal.set(\"min_temp\",min_c)\nglobal.set(\"max_temp\",max_c)\n\nmsg.min = min_c\nmsg.max = max_c\n}\n\n\n\nif (unit == 2){\n    global.set(\"min_head\",min)\n    global.set(\"max_head\",max)\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1020,
        "y": 1820,
        "wires": [
            [
                "985843f.07fc1c"
            ]
        ]
    },
    {
        "id": "ea1caf6a.64b8d",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Sensor MinMax",
        "func": "var sensor_min = msg.payload.data[0];\nvar sensor_max = msg.payload.data[1]/10000;\n\nif (sensor_min === 0){\n    sensor_min = sensor_min;\n}\nelse {\n    sensor_min = sensor_min/10000;\n}\n\nglobal.set(\"sensor_min\",sensor_min)\nglobal.set(\"sensor_max\",sensor_max)\n\nmsg.sensor_min = sensor_min\nmsg.sensor_max = sensor_max\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1900,
        "wires": [
            [
                "2c176201.62e9fe"
            ]
        ]
    },
    {
        "id": "eb3688ce.4d9378",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "msg.payload = parseFloat((msg.payload.data / 10).toFixed(1));\nmsg.topic = \"MAGNA3\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 2660,
        "wires": [
            [
                "604b09c8.44fc08",
                "33583f04.53b82",
                "8c809dae.e3377"
            ]
        ]
    },
    {
        "id": "256351f.aba94ae",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "msg.payload = parseFloat((msg.payload.data / 100).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 2780,
        "wires": [
            [
                "58930c30.7570d4",
                "4cf4b66c.14e348"
            ]
        ]
    },
    {
        "id": "65614d18.9da7a4",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "16 bit status conversion",
        "func": "const buf = Buffer.from(msg.payload.buffer);\n\nvar tmp = parseInt(msg.payload.data).toString(2)\nvar lg = tmp.length\nmsg.lg = lg\n\nif (lg ==8){\n    tmp = \"00000000\"+tmp\n}\n\nif (lg ==9){\n    tmp = \"0000000\"+tmp\n}\n\nif (lg ==10){\n    tmp = \"000000\"+tmp\n} \n\nif (lg ==12){\n    tmp = \"0000\"+tmp\n} \nelse {\n    tmp=tmp\n}\nmsg.payload = tmp\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 2040,
        "wires": [
            [
                "2171788d.6af498"
            ]
        ]
    },
    {
        "id": "2171788d.6af498",
        "type": "split",
        "z": "2db3774.f99f488",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1350,
        "y": 2080,
        "wires": [
            [
                "25f7eac4.aa02b6"
            ]
        ]
    },
    {
        "id": "25f7eac4.aa02b6",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "16 bit states",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "11",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "12",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "13",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "14",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "15",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 16,
        "x": 1530,
        "y": 2000,
        "wires": [
            [
                "c89088bf.fc3ab8"
            ],
            [],
            [
                "b8edbd20.2b511"
            ],
            [
                "bc9ca82b.7d1dc8"
            ],
            [
                "696d79bc.c661d8"
            ],
            [
                "be66db0.4eedb28"
            ],
            [
                "a2e64c39.eb98e"
            ],
            [
                "7ead2589.d239bc"
            ],
            [],
            [],
            [],
            [],
            [],
            [
                "c08c0922.98f6a8"
            ],
            [],
            []
        ]
    },
    {
        "id": "2b29e260.33bace",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "msg.payload = parseFloat((msg.payload.data / 100).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 3080,
        "wires": [
            [
                "6b8133e4.28bc2c"
            ]
        ]
    },
    {
        "id": "7a8902e9.33911c",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "msg.payload = parseFloat((msg.payload.data / 100).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 3200,
        "wires": [
            [
                "eb684cac.c2877"
            ]
        ]
    },
    {
        "id": "c08c0922.98f6a8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "if (msg.payload == 1){\n    msg.payload = \"Yes\"\n}\nelse {\n    msg.payload = \"No\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1740,
        "y": 2080,
        "wires": [
            [
                "d4962b58.4ec068"
            ]
        ]
    },
    {
        "id": "7ead2589.d239bc",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "if (msg.payload == 1){\n    msg.payload = \"Yes\"\n}\nelse {\n    msg.payload = \"No\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1740,
        "y": 2000,
        "wires": [
            [
                "c43ad46c.b5cd28"
            ]
        ]
    },
    {
        "id": "a2e64c39.eb98e",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "if (msg.payload == 1){\n    msg.payload = \"Running\"\n}\nelse {\n    msg.payload = \"Stopped\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1740,
        "y": 1960,
        "wires": [
            [
                "bcbd680d.1e2548"
            ]
        ]
    },
    {
        "id": "be66db0.4eedb28",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "if (msg.payload == 1){\n    msg.payload = \"Yes\"\n}\nelse {\n    msg.payload = \"No\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1740,
        "y": 1920,
        "wires": [
            [
                "4ebac14b.accb"
            ]
        ]
    },
    {
        "id": "bc9ca82b.7d1dc8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "if (msg.payload == 1){\n    msg.payload = \"Yes\"\n}\nelse {\n    msg.payload = \"No\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1740,
        "y": 1780,
        "wires": [
            [
                "1fadf318.46e1ed"
            ]
        ]
    },
    {
        "id": "696d79bc.c661d8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "if (msg.payload == 1){\n    msg.payload = \"Yes\"\n}\nelse {\n    msg.payload = \"No\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1740,
        "y": 1880,
        "wires": [
            [
                "f46a8567.549198"
            ]
        ]
    },
    {
        "id": "c6c73b4.2f250c8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Control mode lookup",
        "func": "if (msg.payload.data[0] === 0){\n    msg.payload = \"Constant Curve\"\n}\nelse if (msg.payload.data[0] == 1){\n    msg.payload = \"Constant Curve\"\n}\n\nelse if (msg.payload.data[0] == 3){\n    msg.payload = \"Constant Head\"\n}\n\nelse if (msg.payload.data[0] == 4){\n    msg.payload = \"Constant Pressure\"\n}\nelse if (msg.payload.data[0] == 5){\n    msg.payload = \"Constant Diff. Pressure\"\n}\nelse if (msg.payload.data[0] == 6){\n    msg.payload = \"Prop. Pressure\"\n}\n\nelse if (msg.payload.data[0] == 7){\n    msg.payload = \"Constant Flow\"\n}\nelse if (msg.payload.data[0] == 8){\n    msg.payload = \"Constant Temperature\"\n}\n\nelse if (msg.payload.data[0] == 9){\n    msg.payload = \"Constant Diff. Temperature\"\n}\n\nelse if (msg.payload.data[0] == 128){\n    msg.payload = \"AutoADAPT\"\n}\n\nelse if (msg.payload.data[0] == 129){\n    msg.payload = \"FlowADAPT\"\n}\n\nelse {\n    msg.payload = \"Undefined\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1020,
        "y": 2140,
        "wires": [
            [
                "482a08b1.c5d5b8"
            ]
        ]
    },
    {
        "id": "3c5c7ab3.7e27f6",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)-273).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 3600,
        "wires": [
            [
                "5583a882.7d57d8"
            ]
        ]
    },
    {
        "id": "604b09c8.44fc08",
        "type": "change",
        "z": "2db3774.f99f488",
        "d": true,
        "name": "Global Flow",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Flow",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "bb56807f.d628f",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "200 range split",
        "func": "var msg1 ={'payload' : {'data' : msg.payload.data[0],'buffer': []}}//200 Status\nmsg1.payload.buffer[0] = msg.payload.buffer[0]//Status\nmsg1.payload.buffer[1] = msg.payload.buffer[1]//Status\n\nvar msg2 ={'payload' : {'data' : []}} // 201 Process Feedback\nmsg2.payload.data[0] = msg.payload.data[1]\n\nvar msg3 ={'payload' : {'data' : []}} //202 Control mode\nmsg3.payload.data[0] = msg.payload.data[2]\n\nvar msg4 ={'payload' : {'data' : []}} //203 Operation Mode\nmsg4.payload.data[0] = msg.payload.data[3]\n\nvar msg5 ={'payload' : {'data' : []}} //204 Fault Code\nmsg5.payload.data[0] = msg.payload.data[4]\n\nvar msg6 ={'payload' : {'data' : []}} //205 Alarm Code\nmsg6.payload.data[0] = msg.payload.data[5]\n\nvar msg7 ={'payload' : {'data' : []}} //206 Bearing Status\nmsg7.payload.data[0] = msg.payload.data[6]\n\nvar msg8 ={'payload' : {'data' : []}} //207 Drive State\nmsg8.payload.data[0] = msg.payload.data[7]\n\nvar msg9 ={'payload' : {'data' : []}} // Sensor Feedback\nmsg9.payload.data[0] = msg.payload.data[8]//208 FeedbackSensorUnit\nmsg9.payload.data[1] = msg.payload.data[9]//209 FeedbackSensorMin\nmsg9.payload.data[2] = msg.payload.data[10] //210 FeedbackSensorMax\n\n\nvar msg12 ={'payload' : {'data' : []}} //Freq info\nmsg12.payload.data[0] = msg.payload.data[11] //211NomFrequency\nmsg12.payload.data[1] = msg.payload.data[12]//212 MinFrequency\nmsg12.payload.data[2] = msg.payload.data[13]//213 MaxFrequency\n\nvar msg15 ={'payload' : {'data' : []}} \nmsg15.payload.data[0] = msg.payload.data[14]//214 SetpointRangeMin\nmsg15.payload.data[1] = msg.payload.data[15]//215 SetpointRangeMax\n\nvar msg16 ={'payload' : {'data' : []}} \nmsg16.payload.data[0] = msg.payload.data[21]//222 Kp\nmsg16.payload.data[1] = msg.payload.data[22]//223 Ti\nmsg16.payload.data[2] = msg.payload.data[23]//224 DirectControl\nreturn [msg1,msg2,msg3,msg4,msg5,msg6,msg7,msg8,msg9,msg12,msg15,msg16];",
        "outputs": 12,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1840,
        "wires": [
            [
                "65614d18.9da7a4"
            ],
            [],
            [
                "c6c73b4.2f250c8"
            ],
            [],
            [
                "c2c4ea8.52fe318"
            ],
            [
                "43426fe9.2eb2a"
            ],
            [],
            [],
            [
                "da848e1a.0683"
            ],
            [
                "18f4e526.c1991b"
            ],
            [
                "ea1caf6a.64b8d"
            ],
            [
                "b3d76cf4.03014",
                "d4824cef.c539a"
            ]
        ]
    },
    {
        "id": "c2c4ea8.52fe318",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Fault Code raw",
        "links": [
            "79fd4ac1.8eb854"
        ],
        "x": 975,
        "y": 1740,
        "wires": []
    },
    {
        "id": "43426fe9.2eb2a",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Warning code raw",
        "links": [
            "3b36e361.4ae77c"
        ],
        "x": 975,
        "y": 1780,
        "wires": []
    },
    {
        "id": "c89088bf.fc3ab8",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1730,
        "y": 1620,
        "wires": [
            [
                "5f9d1dd2.9691e4"
            ]
        ]
    },
    {
        "id": "b8edbd20.2b511",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1730,
        "y": 1680,
        "wires": [
            [
                "217380e3.a9402"
            ]
        ]
    },
    {
        "id": "f8bed00.de36a3",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Notification",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Pump at minimum speed",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2040,
        "y": 1600,
        "wires": [
            [
                "58632b83.e1d234"
            ]
        ]
    },
    {
        "id": "5f9d1dd2.9691e4",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 1620,
        "wires": [
            [
                "f8bed00.de36a3"
            ],
            []
        ]
    },
    {
        "id": "217380e3.a9402",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 1680,
        "wires": [
            [
                "f8508f0d.8409f"
            ],
            []
        ]
    },
    {
        "id": "f8508f0d.8409f",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Notification",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Pump at maximum speed",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2040,
        "y": 1680,
        "wires": [
            [
                "58632b83.e1d234"
            ]
        ]
    },
    {
        "id": "c31b9634.aecf48",
        "type": "sqlite",
        "z": "2db3774.f99f488",
        "mydb": "c3b98441.243208",
        "sqlquery": "fixed",
        "sql": "create table magna3 (thetime TimeStamp, therpm Integer, thehead float, theflow float, theair float)",
        "name": "create table",
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "d2eb2f19.0c3ad"
            ]
        ]
    },
    {
        "id": "9d9f054e.0a64b8",
        "type": "inject",
        "z": "2db3774.f99f488",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 310,
        "y": 1420,
        "wires": [
            [
                "c31b9634.aecf48"
            ]
        ]
    },
    {
        "id": "d2eb2f19.0c3ad",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 1420,
        "wires": []
    },
    {
        "id": "58930c30.7570d4",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "Global Head",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "head",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "9ec7d229.e0a09",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "Global RPM",
        "rules": [
            {
                "t": "move",
                "p": "payload.data[0]",
                "pt": "msg",
                "to": "rpm",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "ea917059.a1093",
        "type": "traffic",
        "z": "2db3774.f99f488",
        "name": "",
        "property_allow": "payload",
        "filter_allow": "start",
        "ignore_case_allow": false,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "payload",
        "filter_stop": "stop",
        "ignore_case_stop": false,
        "negate_stop": false,
        "send_stop": false,
        "default_start": false,
        "differ": false,
        "x": 1190,
        "y": 2360,
        "wires": [
            [
                "3f4416d6.9e9bea"
            ]
        ]
    },
    {
        "id": "d185974b.d498b8",
        "type": "inject",
        "z": "2db3774.f99f488",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 870,
        "y": 2320,
        "wires": [
            [
                "ea917059.a1093"
            ]
        ]
    },
    {
        "id": "a3b72131.a4001",
        "type": "inject",
        "z": "2db3774.f99f488",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "stop",
        "payloadType": "str",
        "x": 870,
        "y": 2360,
        "wires": [
            [
                "ea917059.a1093"
            ]
        ]
    },
    {
        "id": "f61ded08.68a69",
        "type": "sqlite",
        "z": "2db3774.f99f488",
        "mydb": "c3b98441.243208",
        "sqlquery": "prepared",
        "sql": "insert into magna3 (thetime,therpm,thehead,theflow, theair) values ($thetime,$therpm,$thehead,$theflow,$theair)",
        "name": "Insert Data",
        "x": 1570,
        "y": 2360,
        "wires": [
            [
                "eb6b9044.78b2e"
            ]
        ]
    },
    {
        "id": "3f4416d6.9e9bea",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "prepare param",
        "func": "msg.payload = []\nmsg.params = {$thetime:Date.now(), $therpm:global.get(\"rpm\"), $thehead:global.get(\"head\"), $theflow:global.get(\"Flow\"),$theair:global.get(\"Ta_s\")}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1380,
        "y": 2360,
        "wires": [
            [
                "f61ded08.68a69"
            ]
        ]
    },
    {
        "id": "eb6b9044.78b2e",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1770,
        "y": 2360,
        "wires": []
    },
    {
        "id": "83ef0eaf.fdd51",
        "type": "sqlite",
        "z": "2db3774.f99f488",
        "mydb": "c3b98441.243208",
        "sqlquery": "fixed",
        "sql": "select * from magna3",
        "name": "view data",
        "x": 720,
        "y": 1480,
        "wires": [
            [
                "e8d64a21.11a378"
            ]
        ]
    },
    {
        "id": "7b440428.06194c",
        "type": "inject",
        "z": "2db3774.f99f488",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 310,
        "y": 1480,
        "wires": [
            [
                "83ef0eaf.fdd51"
            ]
        ]
    },
    {
        "id": "e8d64a21.11a378",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 1480,
        "wires": []
    },
    {
        "id": "64bfe1ee.f70c5",
        "type": "sqlite",
        "z": "2db3774.f99f488",
        "mydb": "c3b98441.243208",
        "sqlquery": "fixed",
        "sql": "drop table magna3",
        "name": "drop table",
        "x": 720,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "70e4b3f9.a9d77c",
        "type": "inject",
        "z": "2db3774.f99f488",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "64bfe1ee.f70c5"
            ]
        ]
    },
    {
        "id": "e2137fec.ae3c1",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "",
        "links": [
            "f62a1.d01dcd5f"
        ],
        "x": 175,
        "y": 1720,
        "wires": [
            [
                "64bfe1ee.f70c5",
                "4440e8a1.ccf6c8"
            ]
        ]
    },
    {
        "id": "f6db06c8.622c28",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "",
        "links": [
            "4c59afdf.033a8"
        ],
        "x": 895,
        "y": 2280,
        "wires": [
            [
                "ea917059.a1093"
            ]
        ]
    },
    {
        "id": "4440e8a1.ccf6c8",
        "type": "delay",
        "z": "2db3774.f99f488",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 310,
        "y": 1600,
        "wires": [
            [
                "c31b9634.aecf48"
            ]
        ]
    },
    {
        "id": "33583f04.53b82",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "flow simulation",
        "links": [],
        "x": 1275,
        "y": 2740,
        "wires": []
    },
    {
        "id": "985843f.07fc1c",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 1780,
        "wires": []
    },
    {
        "id": "2c176201.62e9fe",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1270,
        "y": 1900,
        "wires": []
    },
    {
        "id": "7c8eddd9.931654",
        "type": "function",
        "z": "2db3774.f99f488",
        "d": true,
        "name": "Modbus Reader ",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 322\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "1df02c39.b282a4",
        "type": "comment",
        "z": "2db3774.f99f488",
        "name": "Copy as needed and enable",
        "info": "",
        "x": 240,
        "y": 2440,
        "wires": []
    },
    {
        "id": "ccb6b95b.c43948",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "RPM 304",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 304\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 2540,
        "wires": [
            [
                "9ec7d229.e0a09",
                "ea917059.a1093",
                "f5c4fb46.8f2e88"
            ]
        ]
    },
    {
        "id": "69599770.d57b68",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Flow 302",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 302\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 2620,
        "wires": [
            [
                "eb3688ce.4d9378"
            ]
        ]
    },
    {
        "id": "39b4ad39.7def42",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Head 301",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 301\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 2740,
        "wires": [
            [
                "256351f.aba94ae"
            ]
        ]
    },
    {
        "id": "281630f2.ce2f5",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "kW 312",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 312\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 2980,
        "wires": [
            [
                "d6bfd62d.c07ba8"
            ]
        ]
    },
    {
        "id": "49d3a4b1.988f9c",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Actual Setpoint 308",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 308\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 3040,
        "wires": [
            [
                "2b29e260.33bace"
            ]
        ]
    },
    {
        "id": "f5fbef28.869b4",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Actual flowlimit 345",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 345\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 3160,
        "wires": [
            [
                "7a8902e9.33911c"
            ]
        ]
    },
    {
        "id": "b6913e15.bbc6",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Liquid temp 322",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 322\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 3560,
        "wires": [
            [
                "3c5c7ab3.7e27f6"
            ]
        ]
    },
    {
        "id": "a054c286.23532",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Opp Hours 327",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 327\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 3280,
        "wires": [
            [
                "4c319f9a.650f9"
            ]
        ]
    },
    {
        "id": "5bd32d5f.ebc494",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "powered Hours 329",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 329\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 3360,
        "wires": [
            [
                "fe5446b2.1d3828"
            ]
        ]
    },
    {
        "id": "d479ac60.2802f",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Start/stop  334",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 334\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 3420,
        "wires": [
            [
                "31298a84.03f4c6"
            ]
        ]
    },
    {
        "id": "f8f53eee.c6fad",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "kWh 332",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 332\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 3480,
        "wires": [
            [
                "2443457d.72f21a"
            ]
        ]
    },
    {
        "id": "ae739706.4fb3f8",
        "type": "comment",
        "z": "2db3774.f99f488",
        "name": "Record Database",
        "info": "",
        "x": 1200,
        "y": 2280,
        "wires": []
    },
    {
        "id": "f5c4fb46.8f2e88",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "RPM",
        "links": [
            "bd43e05a.5a957",
            "bcc42950.24ede8",
            "aa34a2a4.f0413"
        ],
        "x": 1590,
        "y": 2560,
        "wires": [],
        "l": true
    },
    {
        "id": "8c809dae.e3377",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Flow",
        "links": [
            "e020e671.030c08",
            "d014a8c5.f34998",
            "e19b9ab2.5dac48"
        ],
        "x": 1610,
        "y": 2620,
        "wires": [],
        "l": true
    },
    {
        "id": "4cf4b66c.14e348",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Head",
        "links": [
            "9771af97.932c1",
            "af2ae29.e2f1c2",
            "1894e6c6.510e19"
        ],
        "x": 1570,
        "y": 2780,
        "wires": [],
        "l": true
    },
    {
        "id": "d6bfd62d.c07ba8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "kW",
        "links": [
            "a3f905a9.acf678",
            "e1d4a691.e20958",
            "513199c.2154968"
        ],
        "x": 1590,
        "y": 2980,
        "wires": [],
        "l": true
    },
    {
        "id": "6b8133e4.28bc2c",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Actual Setpoint",
        "links": [
            "9d5ff59a.5a1228",
            "826c494d.782e18"
        ],
        "x": 1600,
        "y": 3080,
        "wires": [],
        "l": true
    },
    {
        "id": "eb684cac.c2877",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Actual FlowLimit",
        "links": [
            "d5e80157.46e43",
            "329c3af1.4d8d36"
        ],
        "x": 1620,
        "y": 3200,
        "wires": [],
        "l": true
    },
    {
        "id": "4c319f9a.650f9",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Opperation Hours",
        "links": [
            "8797e79e.b8d688"
        ],
        "x": 1610,
        "y": 3280,
        "wires": [],
        "l": true
    },
    {
        "id": "fe5446b2.1d3828",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Powered Hours",
        "links": [
            "bb4857d2.b3e7a8"
        ],
        "x": 1600,
        "y": 3360,
        "wires": [],
        "l": true
    },
    {
        "id": "31298a84.03f4c6",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "#Start/Stop",
        "links": [
            "7fa1c887.7d2b48"
        ],
        "x": 1590,
        "y": 3420,
        "wires": [],
        "l": true
    },
    {
        "id": "2443457d.72f21a",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "kWh",
        "links": [
            "64953541.94fbbc"
        ],
        "x": 1570,
        "y": 3480,
        "wires": [],
        "l": true
    },
    {
        "id": "5583a882.7d57d8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Liquid Temp",
        "links": [
            "8c26bd71.cff38"
        ],
        "x": 1590,
        "y": 3600,
        "wires": [],
        "l": true
    },
    {
        "id": "cc7dd57b.ad8308",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Remote Temp 2",
        "links": [
            "98c7076e.9889e8"
        ],
        "x": 2200,
        "y": 3660,
        "wires": [],
        "l": true
    },
    {
        "id": "58632b83.e1d234",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Min Max Speed Noti",
        "links": [
            "eef25f1c.86c85"
        ],
        "x": 2340,
        "y": 1600,
        "wires": [],
        "l": true
    },
    {
        "id": "1fadf318.46e1ed",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Forced Local",
        "links": [
            "a63ea07a.1a378"
        ],
        "x": 2330,
        "y": 1780,
        "wires": [],
        "l": true
    },
    {
        "id": "f46a8567.549198",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Warnings",
        "links": [
            "b6c263fc.66af4"
        ],
        "x": 2320,
        "y": 1880,
        "wires": [],
        "l": true
    },
    {
        "id": "4ebac14b.accb",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Faults",
        "links": [
            "e6fe31ec.1ef64"
        ],
        "x": 2310,
        "y": 1920,
        "wires": [],
        "l": true
    },
    {
        "id": "bcbd680d.1e2548",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Start / Stop",
        "links": [
            "d050f301.08c17",
            "e84f1bae.8b0d18"
        ],
        "x": 2330,
        "y": 1960,
        "wires": [],
        "l": true
    },
    {
        "id": "c43ad46c.b5cd28",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Remote Control",
        "links": [
            "b355970c.434768",
            "6be21c.69d85de4"
        ],
        "x": 2340,
        "y": 2000,
        "wires": [],
        "l": true
    },
    {
        "id": "d4962b58.4ec068",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "FlowLimit",
        "links": [
            "b29dc9a3.7e9a38",
            "eca15409.1f11f8"
        ],
        "x": 2320,
        "y": 2080,
        "wires": [],
        "l": true
    },
    {
        "id": "482a08b1.c5d5b8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Control Mode",
        "links": [
            "e339adc6.00ad9",
            "c8b04249.2c53c"
        ],
        "x": 2340,
        "y": 2140,
        "wires": [],
        "l": true
    },
    {
        "id": "f9eda2cf.e2f08",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Alarm/Warning Register",
        "func": "var AlarmWarning = {\n'1' : 'Leakage current',\n'2' : 'Missing phase',\n'3' : 'External fault signal',\n'4' : 'Too many restarts',\n'7' : 'Too many hardware shutdowns',\n'14' : 'Electronic DC-link protection activated (ERP)',\n'16' : 'Other',\n'29' : 'Turbine operation. impellers forced backwards',\n'30' : 'Change bearings (specific service information)',\n'31' : 'Change varistor(s) (specific service information)',\n'32' : 'Overvoltage',\n'40' : 'Undervoltage',\n'41' : 'Undervoltage transient',\n'42' : 'Cut-in fault (dV/dt)',\n'45' : 'Voltage asymmetry',\n'48' : 'Overload',\n'49' : 'Overcurrent (i_line. i_dc. i_mo)',\n'50' : 'Motor protection function. general shutdown (MPF)',\n'51' : 'Blocked motor or pump',\n'54' : 'Motor protection function. 3 sec. limit',\n'55' : 'Motor current protection activated (MCP)',\n'56' : 'Underload',\n'57' : 'Dry-running',\n'60' : 'Low input power',\n'64' : 'Overtemperature',\n'65' : 'Motor temperature 1 (t_m or t_mo or t_mo1)',\n'66' : 'Control electronics temperature high',\n'67' : 'Temperature too high. internal frequency converter module (t_m)',\n'68' : 'Water temperature high',\n'70' : 'Thermal relay 2 in motor. for example thermistor',\n'72' : 'Hardware fault. type 1',\n'73' : 'Hardware shutdown (HSD)',\n'76' : 'Internal communication fault',\n'77' : 'Communication fault. twin-head pump',\n'80' : 'Hardware fault. type 2',\n'83' : 'Verification error. FE parameter area (EEPROM)',\n'84' : 'Memory access error',\n'85' : 'Verification error. BE parameter area (EEPROM)',\n'88' : 'Sensor fault',\n'89' : 'Signal fault. (feedback) sensor 1',\n'91' : 'Signal fault. temperature 1 sensor',\n'93' : 'Signal fault. sensor 2',\n'96' : 'Setpoint signal outside range',\n'105' : 'Electronic rectifier protection activated (ERP)',\n'106' : 'Electronic inverter protection activated (EIP)',\n'148' : 'Motor bearing temperature high (Pt100) in drive end (DE)',\n'149' : 'Motor bearing temperature high (Pt100) in non-drive end (NDE)',\n'155' : 'Inrush fault',\n'156' : 'Communication fault. internal frequency converter module',\n'157' : 'Real time clock error',\n'161' : 'Sensor supply fault. 5 V',\n'162' : 'Sensor supply fault. 24 V',\n'163' : 'Measurement fault. motor protection',\n'164' : 'Signal fault. Liqtec sensor',\n'165' : 'Signal fault. analog input 1',\n'166' : 'Signal fault. analog input 2',\n'167' : 'Signal fault. analog input 3',\n'175' : 'Signal fault. temperature 2 sensor',\n'176' : 'Signal fault. temperature 3 sensor',\n'190' : 'Limit exceeded. sensor 1',\n'191' : 'Limit exceeded. sensor 2',\n'215' : 'Soft pressure buildup timeout',\n'240' : 'Lubricate bearings (specific service information)',\n'241' : 'Motor phase failure',\n'242' : 'Automatic motor model recognition failed',\n}\n\nmsg.payload = AlarmWarning[msg.payload.data[0]]\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 4660,
        "wires": [
            [
                "8c9f4fab.ce53c"
            ]
        ]
    },
    {
        "id": "46dff621.8af848",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Alarm/Warning Register",
        "func": "var AlarmWarning = {\n'1' : 'Leakage current',\n'2' : 'Missing phase',\n'3' : 'External fault signal',\n'4' : 'Too many restarts',\n'7' : 'Too many hardware shutdowns',\n'14' : 'Electronic DC-link protection activated (ERP)',\n'16' : 'Other',\n'29' : 'Turbine operation. impellers forced backwards',\n'30' : 'Change bearings (specific service information)',\n'31' : 'Change varistor(s) (specific service information)',\n'32' : 'Overvoltage',\n'40' : 'Undervoltage',\n'41' : 'Undervoltage transient',\n'42' : 'Cut-in fault (dV/dt)',\n'45' : 'Voltage asymmetry',\n'48' : 'Overload',\n'49' : 'Overcurrent (i_line. i_dc. i_mo)',\n'50' : 'Motor protection function. general shutdown (MPF)',\n'51' : 'Blocked motor or pump',\n'54' : 'Motor protection function. 3 sec. limit',\n'55' : 'Motor current protection activated (MCP)',\n'56' : 'Underload',\n'57' : 'Dry-running',\n'60' : 'Low input power',\n'64' : 'Overtemperature',\n'65' : 'Motor temperature 1 (t_m or t_mo or t_mo1)',\n'66' : 'Control electronics temperature high',\n'67' : 'Temperature too high. internal frequency converter module (t_m)',\n'68' : 'Water temperature high',\n'70' : 'Thermal relay 2 in motor. for example thermistor',\n'72' : 'Hardware fault. type 1',\n'73' : 'Hardware shutdown (HSD)',\n'76' : 'Internal communication fault',\n'77' : 'Communication fault. twin-head pump',\n'80' : 'Hardware fault. type 2',\n'83' : 'Verification error. FE parameter area (EEPROM)',\n'84' : 'Memory access error',\n'85' : 'Verification error. BE parameter area (EEPROM)',\n'88' : 'Sensor fault',\n'89' : 'Signal fault. (feedback) sensor 1',\n'91' : 'Signal fault. temperature 1 sensor',\n'93' : 'Signal fault. sensor 2',\n'96' : 'Setpoint signal outside range',\n'105' : 'Electronic rectifier protection activated (ERP)',\n'106' : 'Electronic inverter protection activated (EIP)',\n'148' : 'Motor bearing temperature high (Pt100) in drive end (DE)',\n'149' : 'Motor bearing temperature high (Pt100) in non-drive end (NDE)',\n'155' : 'Inrush fault',\n'156' : 'Communication fault. internal frequency converter module',\n'157' : 'Real time clock error',\n'161' : 'Sensor supply fault. 5 V',\n'162' : 'Sensor supply fault. 24 V',\n'163' : 'Measurement fault. motor protection',\n'164' : 'Signal fault. Liqtec sensor',\n'165' : 'Signal fault. analog input 1',\n'166' : 'Signal fault. analog input 2',\n'167' : 'Signal fault. analog input 3',\n'175' : 'Signal fault. temperature 2 sensor',\n'176' : 'Signal fault. temperature 3 sensor',\n'190' : 'Limit exceeded. sensor 1',\n'191' : 'Limit exceeded. sensor 2',\n'215' : 'Soft pressure buildup timeout',\n'240' : 'Lubricate bearings (specific service information)',\n'241' : 'Motor phase failure',\n'242' : 'Automatic motor model recognition failed',\n}\n\nmsg.payload = AlarmWarning[msg.payload.data[0]]\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 4900,
        "wires": [
            [
                "cc568aac.12d9e8"
            ]
        ]
    },
    {
        "id": "3672f79.a6e1008",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 4640,
        "wires": [
            [
                "f7703765.9a2988"
            ],
            [
                "f9eda2cf.e2f08",
                "6bd9ebd1.e277f4"
            ]
        ]
    },
    {
        "id": "f7703765.9a2988",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 4580,
        "wires": [
            [
                "6bd9ebd1.e277f4",
                "8c9f4fab.ce53c"
            ]
        ]
    },
    {
        "id": "821186ec.8bb7f8",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 4900,
        "wires": [
            [
                "bff29595.664a78"
            ],
            [
                "46dff621.8af848",
                "152611e5.ac661e"
            ]
        ]
    },
    {
        "id": "bff29595.664a78",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 4840,
        "wires": [
            [
                "152611e5.ac661e",
                "cc568aac.12d9e8"
            ]
        ]
    },
    {
        "id": "80974031.a5dff",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 4460,
        "wires": [
            [
                "ebf1ffa5.e6e22"
            ],
            [
                "f288e333.ea497"
            ]
        ]
    },
    {
        "id": "ebf1ffa5.e6e22",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Enabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 4440,
        "wires": [
            [
                "b71ec84c.6f7928"
            ]
        ]
    },
    {
        "id": "f288e333.ea497",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Disabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 4500,
        "wires": [
            [
                "b71ec84c.6f7928"
            ]
        ]
    },
    {
        "id": "79fd4ac1.8eb854",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "",
        "links": [
            "17a95f78.045d21",
            "c2c4ea8.52fe318"
        ],
        "x": 675,
        "y": 4820,
        "wires": [
            [
                "821186ec.8bb7f8"
            ]
        ]
    },
    {
        "id": "3b36e361.4ae77c",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "",
        "links": [
            "cfd9e5e7.46e948",
            "43426fe9.2eb2a"
        ],
        "x": 675,
        "y": 4640,
        "wires": [
            [
                "3672f79.a6e1008"
            ]
        ]
    },
    {
        "id": "b19573e7.0c60e",
        "type": "comment",
        "z": "2db3774.f99f488",
        "name": "Faults and Warnings information page",
        "info": "",
        "x": 830,
        "y": 4340,
        "wires": []
    },
    {
        "id": "32ebf171.5d5d1e",
        "type": "comment",
        "z": "2db3774.f99f488",
        "name": "MAGNA3 reading",
        "info": "",
        "x": 320,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6bd9ebd1.e277f4",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Warning Code",
        "links": [
            "36422f8c.caccc",
            "53e95ce4.ea0a84"
        ],
        "x": 1520,
        "y": 4560,
        "wires": [],
        "l": true
    },
    {
        "id": "8c9f4fab.ce53c",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Warning Description",
        "links": [
            "e006e3f3.4dfb8",
            "53c873e3.d7df2c"
        ],
        "x": 1540,
        "y": 4640,
        "wires": [],
        "l": true
    },
    {
        "id": "152611e5.ac661e",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Fault Code",
        "links": [
            "926e5f8.e3f17a",
            "c27acb84.f54e38"
        ],
        "x": 1510,
        "y": 4820,
        "wires": [],
        "l": true
    },
    {
        "id": "cc568aac.12d9e8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Fault Description",
        "links": [
            "ee341caa.75437",
            "840fd34.dbda73"
        ],
        "x": 1530,
        "y": 4900,
        "wires": [],
        "l": true
    },
    {
        "id": "b71ec84c.6f7928",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Fault Simulation Status",
        "links": [
            "e1e6b3d6.c678d",
            "f1b4ade9.64e42"
        ],
        "x": 1170,
        "y": 4460,
        "wires": [],
        "l": true
    },
    {
        "id": "69ded483.e9b5ec",
        "type": "ui_switch",
        "z": "ef4d3c17.ae27b",
        "name": "",
        "label": "Simulation",
        "tooltip": "",
        "group": "26881754.b529d8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "c839627e.2dda6"
            ]
        ]
    },
    {
        "id": "2611c5f2.7d5aba",
        "type": "ui_dropdown",
        "z": "ef4d3c17.ae27b",
        "d": true,
        "name": "",
        "label": "Error Code",
        "tooltip": "",
        "place": "Select option",
        "group": "26881754.b529d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Forced Pumping",
                "value": "29",
                "type": "str"
            },
            {
                "label": "Internal Sensor Fault",
                "value": "88",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "d0d3d53e.68f368"
            ]
        ]
    },
    {
        "id": "d0d3d53e.68f368",
        "type": "link out",
        "z": "ef4d3c17.ae27b",
        "name": "Fault Code Simulation",
        "links": [
            "e6409af.1b98c68",
            "33c9d6b6.4c63da"
        ],
        "x": 520,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "c839627e.2dda6",
        "type": "link out",
        "z": "ef4d3c17.ae27b",
        "name": "Fault Simulation Enable",
        "links": [
            "9f69c2bb.16d78",
            "7d89073c.2f6fe8"
        ],
        "x": 530,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "c27fc2a.8e6654",
        "type": "ui_text",
        "z": "ef4d3c17.ae27b",
        "group": "bd33570d.7d8268",
        "order": 2,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Warning Description",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 500,
        "y": 380,
        "wires": []
    },
    {
        "id": "4cd69b12.43f7f4",
        "type": "ui_text",
        "z": "ef4d3c17.ae27b",
        "group": "bd33570d.7d8268",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Warning Code",
        "format": "{{msg.payload.data[0]}}",
        "layout": "row-spread",
        "x": 480,
        "y": 280,
        "wires": []
    },
    {
        "id": "19e920b3.16e69f",
        "type": "ui_text",
        "z": "ef4d3c17.ae27b",
        "group": "3256df1b.4a908",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Fault Code",
        "format": "{{msg.payload.data[0]}}",
        "layout": "row-spread",
        "x": 470,
        "y": 560,
        "wires": []
    },
    {
        "id": "d55cfb00.f17778",
        "type": "ui_text",
        "z": "ef4d3c17.ae27b",
        "group": "3256df1b.4a908",
        "order": 2,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Fault Description",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "d043183a.1d08a8",
        "type": "ui_text",
        "z": "ef4d3c17.ae27b",
        "group": "26881754.b529d8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Simulation Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 490,
        "y": 720,
        "wires": []
    },
    {
        "id": "f1b4ade9.64e42",
        "type": "link in",
        "z": "ef4d3c17.ae27b",
        "name": "Fault Simulation Status",
        "links": [
            "b71ec84c.6f7928"
        ],
        "x": 240,
        "y": 720,
        "wires": [
            [
                "d043183a.1d08a8"
            ]
        ],
        "l": true
    },
    {
        "id": "53e95ce4.ea0a84",
        "type": "link in",
        "z": "ef4d3c17.ae27b",
        "name": "Warning Code",
        "links": [
            "6bd9ebd1.e277f4"
        ],
        "x": 210,
        "y": 280,
        "wires": [
            [
                "4cd69b12.43f7f4"
            ]
        ],
        "l": true
    },
    {
        "id": "53c873e3.d7df2c",
        "type": "link in",
        "z": "ef4d3c17.ae27b",
        "name": "Warning Code Description",
        "links": [
            "8c9f4fab.ce53c"
        ],
        "x": 250,
        "y": 380,
        "wires": [
            [
                "c27fc2a.8e6654"
            ]
        ],
        "l": true
    },
    {
        "id": "c27acb84.f54e38",
        "type": "link in",
        "z": "ef4d3c17.ae27b",
        "name": "Fault Code",
        "links": [
            "152611e5.ac661e"
        ],
        "x": 200,
        "y": 560,
        "wires": [
            [
                "19e920b3.16e69f"
            ]
        ],
        "l": true
    },
    {
        "id": "840fd34.dbda73",
        "type": "link in",
        "z": "ef4d3c17.ae27b",
        "name": "Fault Description",
        "links": [
            "cc568aac.12d9e8"
        ],
        "x": 220,
        "y": 640,
        "wires": [
            [
                "d55cfb00.f17778"
            ]
        ],
        "l": true
    },
    {
        "id": "f7559cf9.6bae1",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 1",
        "channel": "0",
        "interval": "1000",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "e6feb6dd.bd9818"
            ]
        ]
    },
    {
        "id": "45e62f8f.cd751",
        "type": "widgetlords-vpe-3011b-relay",
        "z": "dff53b0e.d3f2c8",
        "name": "K1",
        "channel": "0",
        "x": 510,
        "y": 180,
        "wires": []
    },
    {
        "id": "1babd36d.9ed2fd",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 2",
        "channel": "1",
        "interval": "1000",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "6169b4a.28f344c"
            ]
        ]
    },
    {
        "id": "6169b4a.28f344c",
        "type": "widgetlords-vpe-3011b-relay",
        "z": "dff53b0e.d3f2c8",
        "name": "K2",
        "channel": "0",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "e6feb6dd.bd9818",
        "type": "debug",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 540,
        "y": 120,
        "wires": []
    },
    {
        "id": "a3fbae4e.bb741",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "45e62f8f.cd751",
                "6169b4a.28f344c"
            ]
        ]
    },
    {
        "id": "4dde5377.47dc2c",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 3",
        "channel": "2",
        "interval": "1000",
        "x": 170,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d5d3aa5a.529648",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 4",
        "channel": "3",
        "interval": "1000",
        "x": 170,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e08141ad.2a974",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 5",
        "channel": "4",
        "interval": "1000",
        "x": 170,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "8050d917.9c3148",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 6",
        "channel": "5",
        "interval": "1000",
        "x": 170,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "79358234.4f1ffc",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 7",
        "channel": "6",
        "interval": "1000",
        "x": 170,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f50c9e18.de668",
        "type": "widgetlords-vpe-3011b-digital",
        "z": "dff53b0e.d3f2c8",
        "name": "DI 8",
        "channel": "7",
        "interval": "1000",
        "x": 170,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "191db9a4.cf2076",
        "type": "widgetlords-vpe-3011b-sdafe",
        "z": "dff53b0e.d3f2c8",
        "d": true,
        "name": "",
        "channel": "6",
        "input_type": "7",
        "interval": "1000",
        "x": 450,
        "y": 380,
        "wires": [
            [
                "7c31e97a.6712c8"
            ]
        ]
    },
    {
        "id": "7c31e97a.6712c8",
        "type": "debug",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 380,
        "wires": []
    },
    {
        "id": "9e892c38.04976",
        "type": "widgetlords-analog-out",
        "z": "dff53b0e.d3f2c8",
        "name": "A2 0-10V",
        "channel": "2",
        "address": "0",
        "x": 660,
        "y": 520,
        "wires": []
    },
    {
        "id": "aa0c5e8.a0497a",
        "type": "widgetlords-analog-out",
        "z": "dff53b0e.d3f2c8",
        "name": "A1 4-20",
        "channel": "0",
        "address": "0",
        "x": 660,
        "y": 780,
        "wires": []
    },
    {
        "id": "2d74fc5d.e35e74",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "800",
        "payloadType": "num",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "aa0c5e8.a0497a"
            ]
        ]
    },
    {
        "id": "fce63fb6.67459",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4000",
        "payloadType": "num",
        "x": 450,
        "y": 900,
        "wires": [
            [
                "aa0c5e8.a0497a"
            ]
        ]
    },
    {
        "id": "337ac130.6bc15e",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2000",
        "payloadType": "num",
        "x": 430,
        "y": 840,
        "wires": [
            [
                "aa0c5e8.a0497a"
            ]
        ]
    },
    {
        "id": "6eefb36e.e7e89c",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 450,
        "y": 620,
        "wires": [
            [
                "9e892c38.04976",
                "aa0c5e8.a0497a"
            ]
        ]
    },
    {
        "id": "7c6bc6ec.bfec38",
        "type": "function",
        "z": "dff53b0e.d3f2c8",
        "name": "Temp to analogue",
        "func": "var min = global.get(\"min_temp\")\nvar max = global.get(\"max_temp\")\nvar target_temp = msg.payload\nvar offset = 0.5\nif (target_temp >= max){\n    target_temp = max\n} \nelse if (target_temp <= min){\n    target_temp = min\n}\n\n// voltage = 1 or current = 2 selection\nvar selector = 1\nif(selector==1){\n    var ana_max = 4000\n    var ana_min = 0\n}\nelse{\n    var ana_max = 4000\n    var ana_min = 800\n}\n\nvar target_percentage = ((target_temp-offset)-min) / (max-min)\n\nvar target_ana = target_percentage *(ana_max-ana_min)+ana_min\n\nmsg.payload = parseFloat((target_ana).toFixed(0))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 440,
        "wires": [
            [
                "924b547c.bdb9d8",
                "9e892c38.04976"
            ]
        ]
    },
    {
        "id": "5be2f3c4.381bac",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "15",
        "payloadType": "num",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "7c6bc6ec.bfec38"
            ]
        ]
    },
    {
        "id": "924b547c.bdb9d8",
        "type": "debug",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 870,
        "y": 460,
        "wires": []
    },
    {
        "id": "a04d78de.6bed48",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4000",
        "payloadType": "num",
        "x": 450,
        "y": 580,
        "wires": [
            [
                "9e892c38.04976"
            ]
        ]
    },
    {
        "id": "f5fec105.b6829",
        "type": "widgetlords-analog-out",
        "z": "8e025641.d38868",
        "name": "A3 0-10V",
        "channel": "2",
        "address": "0",
        "x": 1440,
        "y": 2240,
        "wires": []
    },
    {
        "id": "76d45005.bef82",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "Temp to analogue",
        "func": "var min = global.get(\"min_temp\")\nvar max = global.get(\"max_temp\")\nvar target_temp = msg.payload\nvar offset = 0.5\nif (target_temp >= max){\n    target_temp = max\n} \nelse if (target_temp <= min){\n    target_temp = min\n}\n\n// voltage = 1 or current = 2 selection\nvar selector = 1\nif(selector==1){\n    var ana_max = 4000\n    var ana_min = 0\n}\nelse{\n    var ana_max = 4000\n    var ana_min = 800\n}\n\nvar target_percentage = ((target_temp-offset)-min) / (max-min)\n\nvar target_ana = target_percentage *(ana_max-ana_min)+ana_min\n\nmsg.payload = parseFloat((target_ana).toFixed(0))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 2240,
        "wires": [
            [
                "f5fec105.b6829"
            ]
        ]
    },
    {
        "id": "ff0b5036.41968",
        "type": "widgetlords-analog-out",
        "z": "dff53b0e.d3f2c8",
        "name": "A1 0-5",
        "channel": "2",
        "address": "0",
        "x": 1070,
        "y": 780,
        "wires": []
    },
    {
        "id": "8f8f3491.94a188",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 860,
        "y": 780,
        "wires": [
            [
                "ff0b5036.41968"
            ]
        ]
    },
    {
        "id": "ca0a0375.52b56",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4000",
        "payloadType": "num",
        "x": 870,
        "y": 900,
        "wires": [
            [
                "ff0b5036.41968"
            ]
        ]
    },
    {
        "id": "940f17a3.7ff648",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2000",
        "payloadType": "num",
        "x": 850,
        "y": 840,
        "wires": [
            [
                "ff0b5036.41968"
            ]
        ]
    },
    {
        "id": "d3d89b72.1d3a98",
        "type": "inject",
        "z": "2db3774.f99f488",
        "name": "",
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2620,
        "wires": [
            [
                "6f3c30c8.66939",
                "d81ad822.7777c8"
            ]
        ]
    },
    {
        "id": "58a6e233.00e49c",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 730,
        "y": 2200,
        "wires": []
    },
    {
        "id": "6191ac10.9ef984",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC3 708 1",
        "func": "var fc=3;\nvar sa=708;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 2940,
        "wires": [
            [
                "cbc014da.c29c18",
                "c4413b70.6dd9a8"
            ]
        ]
    },
    {
        "id": "cbc014da.c29c18",
        "type": "modbus-flex-getter",
        "z": "2db3774.f99f488",
        "name": "Read",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "276147dc.e6e7f8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 430,
        "y": 2820,
        "wires": [
            [],
            [
                "ab92b968.c21928",
                "58a6e233.00e49c"
            ]
        ]
    },
    {
        "id": "6f3c30c8.66939",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC3 300 62",
        "func": "var fc=3;\nvar sa=300;\nvar addresses=62;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 2740,
        "wires": [
            [
                "cbc014da.c29c18",
                "7f29a7b8.2c79e8"
            ]
        ]
    },
    {
        "id": "7f29a7b8.2c79e8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC3 200 24",
        "func": "var fc=3;\nvar sa=200;\nvar addresses=24;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2840,
        "wires": [
            [
                "cbc014da.c29c18",
                "6191ac10.9ef984"
            ]
        ]
    },
    {
        "id": "ab92b968.c21928",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "modbusRequest.address",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "300",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "708",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 3220,
        "wires": [
            [
                "ccb6b95b.c43948",
                "69599770.d57b68",
                "39b4ad39.7def42",
                "281630f2.ce2f5",
                "49d3a4b1.988f9c",
                "f5fbef28.869b4",
                "a054c286.23532",
                "5bd32d5f.ebc494",
                "d479ac60.2802f",
                "f8f53eee.c6fad",
                "b6913e15.bbc6",
                "b183f994.3d9368",
                "dffe97f2.982878",
                "3f0e943b.4117cc",
                "58a43c80.3be504",
                "f7cebe69.8ffc",
                "4144b1aa.d8b52",
                "24475ab4.34d056",
                "95e5707a.be75d"
            ],
            [
                "bb56807f.d628f"
            ],
            [
                "80974031.a5dff"
            ]
        ]
    },
    {
        "id": "927f3da9.624ca",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 100",
        "func": "var fc=6;\nvar sa=100;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1640,
        "y": 520,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "97be8ca3.66ade",
        "type": "modbus-flex-write",
        "z": "2db3774.f99f488",
        "name": "ModBus Write",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "276147dc.e6e7f8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 2020,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f2dbf1b.fff161",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 105",
        "func": "var fc=6;\nvar sa=105;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1600,
        "y": 640,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "1212e6ca.3c8709",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 101",
        "func": "var fc=6;\nvar sa=101;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1620,
        "y": 780,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "9f440d7d.0b7ff",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 103",
        "func": "var fc=6;\nvar sa=103;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1660,
        "y": 1040,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "33c9d6b6.4c63da",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "Fault Code Simulation",
        "links": [
            "167dcfd2.75066",
            "d0d3d53e.68f368"
        ],
        "x": 1455,
        "y": 1140,
        "wires": [
            [
                "718b6b4f.058fb4",
                "f7920871.42d778"
            ]
        ]
    },
    {
        "id": "7d89073c.2f6fe8",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "Fault Simulation Enable",
        "links": [
            "bfd1bfd0.86d37",
            "c839627e.2dda6"
        ],
        "x": 1435,
        "y": 1220,
        "wires": [
            [
                "4d7dee44.1ed04"
            ]
        ]
    },
    {
        "id": "718b6b4f.058fb4",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 700",
        "func": "var fc=6;\nvar sa=700;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1660,
        "y": 1100,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "f7920871.42d778",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 701",
        "func": "var fc=6;\nvar sa=701;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1660,
        "y": 1200,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "4d7dee44.1ed04",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 707",
        "func": "var fc=6;\nvar sa=707;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1640,
        "y": 1280,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "18f4e526.c1991b",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "freq",
        "func": "var nom_freq = msg.payload.data[0]/100\nvar min_freq = msg.payload.data[1]/100\nvar max_freq = msg.payload.data[2]/100\n\n\nglobal.set(\"min_freq\",min_freq)\nglobal.set(\"max_freq\",max_freq)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 990,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "b183f994.3d9368",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote temp2 337",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 337\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 3720,
        "wires": [
            [
                "7ef1f5e4.9c92dc"
            ]
        ]
    },
    {
        "id": "c36b9ed0.a73d4",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 3720,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "9dbcec63.16af8"
            ]
        ]
    },
    {
        "id": "91bc73c7.169f1",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": " ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1800,
        "y": 3660,
        "wires": [
            [
                "cc7dd57b.ad8308"
            ]
        ]
    },
    {
        "id": "b3f2e5c2.965048",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1740,
        "y": 3720,
        "wires": [
            [
                "cc7dd57b.ad8308"
            ]
        ]
    },
    {
        "id": "3f0e943b.4117cc",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote press 2 341",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 341\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 920,
        "y": 3800,
        "wires": [
            [
                "fc7f217b.04416"
            ]
        ]
    },
    {
        "id": "7ef1f5e4.9c92dc",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Remote Temp 2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3720,
        "wires": [
            [
                "3ec95202.23433e"
            ]
        ]
    },
    {
        "id": "fc7f217b.04416",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Remote Press 2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3800,
        "wires": [
            [
                "45a1744.b8ef58c"
            ]
        ]
    },
    {
        "id": "9b116a33.a4ee38",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2190,
        "y": 3540,
        "wires": []
    },
    {
        "id": "58a43c80.3be504",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote press 1 316",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 316\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 920,
        "y": 3840,
        "wires": [
            [
                "7e66ab7c.28d344"
            ]
        ]
    },
    {
        "id": "7e66ab7c.28d344",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Remote Press 1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3840,
        "wires": [
            [
                "8eb4e249.4cd8d"
            ]
        ]
    },
    {
        "id": "dffe97f2.982878",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote temp1 320",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 320\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 3760,
        "wires": [
            [
                "1cf3ad7b.ba8e63"
            ]
        ]
    },
    {
        "id": "1cf3ad7b.ba8e63",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Remote Temp 1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3760,
        "wires": [
            [
                "ae8366b9.cf0748"
            ]
        ]
    },
    {
        "id": "f7cebe69.8ffc",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote flow 314",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 314\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 3880,
        "wires": [
            [
                "6386b912.143888"
            ]
        ]
    },
    {
        "id": "6386b912.143888",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Remote Flow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3880,
        "wires": [
            [
                "42bcd991.6216b8"
            ]
        ]
    },
    {
        "id": "4144b1aa.d8b52",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote diff temp 346",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 346\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 920,
        "y": 3920,
        "wires": [
            [
                "3caf5e3d.9de082"
            ]
        ]
    },
    {
        "id": "3caf5e3d.9de082",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Remote Diff Temp",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3920,
        "wires": [
            [
                "4f161753.55b818"
            ]
        ]
    },
    {
        "id": "24475ab4.34d056",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote diff press 349",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 349\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 920,
        "y": 3960,
        "wires": [
            [
                "8c885329.342f6"
            ]
        ]
    },
    {
        "id": "8c885329.342f6",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Remote Diff Press",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3960,
        "wires": [
            [
                "54584380.199dec"
            ]
        ]
    },
    {
        "id": "95e5707a.be75d",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Remote tank 350",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 350\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = false\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 301\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data[0] = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 4000,
        "wires": [
            [
                "eeb487ef.c49bc8"
            ]
        ]
    },
    {
        "id": "eeb487ef.c49bc8",
        "type": "change",
        "z": "2db3774.f99f488",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "Tank Level",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 4000,
        "wires": [
            [
                "1d16ea0d.945036"
            ]
        ]
    },
    {
        "id": "eb412148.0df06",
        "type": "function",
        "z": "ac69f322.1bb2c",
        "name": "scale",
        "func": "msg.payload = (msg.payload)*100\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1300,
        "wires": [
            [
                "38aff79f.8ad6c8"
            ]
        ]
    },
    {
        "id": "a8617fa1.61aa6",
        "type": "ui_numeric",
        "z": "ac69f322.1bb2c",
        "name": "Flow Limit",
        "label": "Flow Limit",
        "tooltip": "",
        "group": "ab3a9e02.8ace9",
        "order": 4,
        "width": "0",
        "height": "0",
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} m<sup>3</sup>/h",
        "min": "0",
        "max": "16",
        "step": "0.2",
        "x": 380,
        "y": 1300,
        "wires": [
            [
                "eb412148.0df06"
            ]
        ]
    },
    {
        "id": "80e5ec75.3c108",
        "type": "ui_numeric",
        "z": "ac69f322.1bb2c",
        "name": "Setpoint",
        "label": "setpoint",
        "tooltip": "",
        "group": "ab3a9e02.8ace9",
        "order": 8,
        "width": "4",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} %",
        "min": 0,
        "max": "100",
        "step": "5",
        "x": 420,
        "y": 1480,
        "wires": [
            [
                "31e581d4.da395e"
            ]
        ]
    },
    {
        "id": "31e581d4.da395e",
        "type": "function",
        "z": "ac69f322.1bb2c",
        "name": "scale",
        "func": "msg.payload = msg.payload*100\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 1480,
        "wires": [
            [
                "52353989.0b7498"
            ]
        ]
    },
    {
        "id": "deaa4c34.e170f",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "",
        "group": "806379db.c33df8",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "",
        "x": 1090,
        "y": 640,
        "wires": [
            [
                "317a4aa2.10a196"
            ]
        ]
    },
    {
        "id": "317a4aa2.10a196",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "clear_data",
        "links": [
            "9a84d296.1964e",
            "87f5ae90.d70de",
            "d35bf42.005de08",
            "71418a91.79de74"
        ],
        "x": 1315,
        "y": 640,
        "wires": []
    },
    {
        "id": "30190fa9.28da7",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 3760,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "7aa7180c.081fd8"
            ]
        ]
    },
    {
        "id": "9dbcec63.16af8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)-273).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 3720,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "7aa7180c.081fd8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)-273).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 3760,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "9559774b.7aa738",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 3800,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "e8e212e3.ceeb9"
            ]
        ]
    },
    {
        "id": "e8e212e3.ceeb9",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 3800,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "cc9a0744.dc7ab8",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 3840,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "ee11c6c9.fc59b8"
            ]
        ]
    },
    {
        "id": "ee11c6c9.fc59b8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 3840,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "1cabc0e2.570abf",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 3880,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "ff7600c3.bd526"
            ]
        ]
    },
    {
        "id": "ff7600c3.bd526",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 3880,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "d722326a.27e5",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 3920,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "327daa35.209b56"
            ]
        ]
    },
    {
        "id": "327daa35.209b56",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 3920,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "5595eb7.c18fc14",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 3960,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "f26c5536.f2b3d8"
            ]
        ]
    },
    {
        "id": "f26c5536.f2b3d8",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 3960,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "3201978b.37cdb8",
        "type": "switch",
        "z": "2db3774.f99f488",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "65535",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "65535",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 4000,
        "wires": [
            [
                "91bc73c7.169f1"
            ],
            [
                "f83b8670.b40e58"
            ]
        ]
    },
    {
        "id": "f83b8670.b40e58",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "rounding",
        "func": "\n\nmsg.payload = parseFloat(((msg.payload.data / 100)).toFixed(1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1560,
        "y": 4000,
        "wires": [
            [
                "b3f2e5c2.965048"
            ]
        ]
    },
    {
        "id": "3ec95202.23433e",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 3720,
        "wires": [
            [
                "c36b9ed0.a73d4"
            ]
        ]
    },
    {
        "id": "ae8366b9.cf0748",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 3760,
        "wires": [
            [
                "30190fa9.28da7"
            ]
        ]
    },
    {
        "id": "45a1744.b8ef58c",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 3800,
        "wires": [
            [
                "9559774b.7aa738"
            ]
        ]
    },
    {
        "id": "8eb4e249.4cd8d",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 3840,
        "wires": [
            [
                "cc9a0744.dc7ab8"
            ]
        ]
    },
    {
        "id": "42bcd991.6216b8",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 3880,
        "wires": [
            [
                "1cabc0e2.570abf"
            ]
        ]
    },
    {
        "id": "4f161753.55b818",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 3920,
        "wires": [
            [
                "d722326a.27e5"
            ]
        ]
    },
    {
        "id": "54584380.199dec",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 3960,
        "wires": [
            [
                "5595eb7.c18fc14"
            ]
        ]
    },
    {
        "id": "1d16ea0d.945036",
        "type": "rbe",
        "z": "2db3774.f99f488",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload.data",
        "x": 1270,
        "y": 4000,
        "wires": [
            [
                "3201978b.37cdb8"
            ]
        ]
    },
    {
        "id": "daf966c0.953248",
        "type": "modbus-flex-getter",
        "z": "651c65ba.af2eec",
        "name": "Read Valve",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "276147dc.e6e7f8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 730,
        "y": 180,
        "wires": [
            [],
            [
                "b7bc4a6a.b92418"
            ]
        ]
    },
    {
        "id": "bb8598ee.060358",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Application- FC3 32810",
        "func": "var fc=3;\nvar sa=32810;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "daf966c0.953248",
                "80e42972.2529d8"
            ]
        ]
    },
    {
        "id": "88353391.41875",
        "type": "debug",
        "z": "651c65ba.af2eec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 420,
        "wires": []
    },
    {
        "id": "c59565b2.e748e8",
        "type": "modbus-flex-write",
        "z": "651c65ba.af2eec",
        "name": "ModBus Write",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "276147dc.e6e7f8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 960,
        "y": 440,
        "wires": [
            [],
            [
                "88353391.41875"
            ]
        ]
    },
    {
        "id": "98c8f7fd.0da998",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Application- FC6 32810",
        "func": "var fc=6;\nvar sa=32810;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 460,
        "wires": [
            [
                "c59565b2.e748e8",
                "ba42b696.dea618"
            ]
        ]
    },
    {
        "id": "64bf5a60.7253d4",
        "type": "inject",
        "z": "2db3774.f99f488",
        "d": true,
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 2560,
        "wires": [
            [
                "6f3c30c8.66939"
            ]
        ]
    },
    {
        "id": "50ed83e7.c8c6dc",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "32 Bit Write - FC 16",
        "func": "var fc=16;\nvar sa=70;\nvar addresses=2;\nvar value=msg.payload;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n//msg.slave_id=37;\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1510,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "82c7f4ff.6551d8",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "32 bit read",
        "func": "\nvar lg = msg.payload.data.length\n\nif (lg < 1){\n\nconst buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt32BE();\nmsg.payload = value;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1490,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4d8a9895.a95da8",
        "type": "comment",
        "z": "651c65ba.af2eec",
        "name": "Valve initial Configuration",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "80e42972.2529d8",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 380,
        "wires": [
            [
                "bf927b6.4200188"
            ]
        ]
    },
    {
        "id": "48e487e3.f64e48",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "32 bit float read",
        "func": "\nvar lg = msg.payload.data.length\n\nif (lg > 1){\n\nconst buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readFloatBE();\n\nmsg.payload = value;\nmsg.payload = parseFloat(msg.payload.toFixed(1));\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "88353391.41875",
                "c4ecf8db.4c02a8"
            ]
        ]
    },
    {
        "id": "bf927b6.4200188",
        "type": "change",
        "z": "651c65ba.af2eec",
        "name": "digital mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 420,
        "wires": [
            [
                "98c8f7fd.0da998"
            ]
        ]
    },
    {
        "id": "ecd4eb2.c831d18",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Cooling - FC3 32811",
        "func": "var fc=3;\nvar sa=32811;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 600,
        "wires": [
            [
                "993b01eb.9055b",
                "daf966c0.953248"
            ]
        ]
    },
    {
        "id": "52b2a35a.fdc42c",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Cooling - FC6 32811",
        "func": "var fc=6;\nvar sa=32811;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 720,
        "wires": [
            [
                "c59565b2.e748e8",
                "698c45e.a9883bc"
            ]
        ]
    },
    {
        "id": "993b01eb.9055b",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 640,
        "wires": [
            [
                "6835bb90.44b4b4"
            ]
        ]
    },
    {
        "id": "6835bb90.44b4b4",
        "type": "change",
        "z": "651c65ba.af2eec",
        "name": "cooling mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 680,
        "wires": [
            [
                "52b2a35a.fdc42c"
            ]
        ]
    },
    {
        "id": "ba42b696.dea618",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 280,
        "y": 540,
        "wires": [
            [
                "ecd4eb2.c831d18"
            ]
        ]
    },
    {
        "id": "86cb877a.5ae768",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Valve Type - FC6 32802",
        "func": "var fc=6;\nvar sa=32802;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "c59565b2.e748e8",
                "556e3422.3cfccc"
            ]
        ]
    },
    {
        "id": "ed5794f3.437038",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 160,
        "wires": [
            [
                "a262f194.5b4ce"
            ]
        ]
    },
    {
        "id": "a262f194.5b4ce",
        "type": "change",
        "z": "651c65ba.af2eec",
        "name": "DN32",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "8",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 200,
        "wires": [
            [
                "86cb877a.5ae768"
            ]
        ]
    },
    {
        "id": "556e3422.3cfccc",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 280,
        "wires": [
            [
                "bb8598ee.060358"
            ]
        ]
    },
    {
        "id": "84f53697.766578",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Units Display - FC3 32787",
        "func": "var fc=3;\nvar sa=32787;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 860,
        "wires": [
            [
                "cdef0d0b.5908",
                "daf966c0.953248"
            ]
        ]
    },
    {
        "id": "cc89641b.5a2b58",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Units display - FC6 32787",
        "func": "var fc=6;\nvar sa=32787;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 980,
        "wires": [
            [
                "85f1332f.0de1e",
                "c59565b2.e748e8"
            ]
        ]
    },
    {
        "id": "cdef0d0b.5908",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 900,
        "wires": [
            [
                "e5afcdc9.ad98e"
            ]
        ]
    },
    {
        "id": "e5afcdc9.ad98e",
        "type": "change",
        "z": "651c65ba.af2eec",
        "name": "% mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 940,
        "wires": [
            [
                "cc89641b.5a2b58"
            ]
        ]
    },
    {
        "id": "698c45e.a9883bc",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 280,
        "y": 800,
        "wires": [
            [
                "84f53697.766578"
            ]
        ]
    },
    {
        "id": "8e348fad.59715",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Units setpoint - FC3 32788",
        "func": "var fc=3;\nvar sa=32788;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "6d7b5da5.aead74",
                "daf966c0.953248"
            ]
        ]
    },
    {
        "id": "31c19996.2acb46",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Units setpoint - FC6 32788",
        "func": "var fc=6;\nvar sa=32788;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1240,
        "wires": [
            [
                "c59565b2.e748e8",
                "e758833.77e268"
            ]
        ]
    },
    {
        "id": "6d7b5da5.aead74",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "7fc38e47.7304d"
            ]
        ]
    },
    {
        "id": "7fc38e47.7304d",
        "type": "change",
        "z": "651c65ba.af2eec",
        "name": "% mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 1200,
        "wires": [
            [
                "31c19996.2acb46"
            ]
        ]
    },
    {
        "id": "85f1332f.0de1e",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 280,
        "y": 1060,
        "wires": [
            [
                "8e348fad.59715"
            ]
        ]
    },
    {
        "id": "8b540cbd.810fc",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Design FLow - FC3 32798",
        "func": "var fc=3;\nvar sa=32798;\nvar addresses=2;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1380,
        "wires": [
            [
                "a142727d.1ab66",
                "daf966c0.953248"
            ]
        ]
    },
    {
        "id": "a142727d.1ab66",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 320,
        "y": 1420,
        "wires": [
            [
                "b674da07.440b08"
            ]
        ]
    },
    {
        "id": "b674da07.440b08",
        "type": "change",
        "z": "651c65ba.af2eec",
        "name": "100 %",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "100.0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 1460,
        "wires": [
            [
                "f5960dbe.ac69e"
            ]
        ]
    },
    {
        "id": "e758833.77e268",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 1320,
        "wires": [
            [
                "8b540cbd.810fc"
            ]
        ]
    },
    {
        "id": "f5960dbe.ac69e",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Design Flow - FC 16 32798",
        "func": "var fc=16;\nvar sa=32798;\nvar addresses=2;\nvar value=msg.payload;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n//msg.slave_id=37;\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1520,
        "wires": [
            [
                "c59565b2.e748e8",
                "10ba9c20.b90244"
            ]
        ]
    },
    {
        "id": "a7bc04ef.2e4998",
        "type": "inject",
        "z": "651c65ba.af2eec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 80,
        "wires": [
            [
                "12043a28.b09486"
            ]
        ]
    },
    {
        "id": "7e15a5bc.5bf7ec",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Setpoint - FC 16 33280",
        "func": "var fc=16;\nvar sa=33280;\nvar addresses=2;\nvar value=msg.payload;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n//msg.slave_id=37;\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 1840,
        "wires": [
            [
                "58f7cd73.7e8a94"
            ]
        ]
    },
    {
        "id": "58f7cd73.7e8a94",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "To Valve Write",
        "links": [
            "1e8851ec.fb6dfe"
        ],
        "x": 1180,
        "y": 1840,
        "wires": [],
        "l": true
    },
    {
        "id": "1e8851ec.fb6dfe",
        "type": "link in",
        "z": "651c65ba.af2eec",
        "name": "to write in",
        "links": [
            "58f7cd73.7e8a94"
        ],
        "x": 785,
        "y": 320,
        "wires": [
            [
                "c59565b2.e748e8"
            ]
        ],
        "l": true
    },
    {
        "id": "ac21fd07.1aa27",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Setpoint and Valve - FC3 33282",
        "func": "var fc=3;\nvar sa=33282;\nvar addresses=2;\nmsg.topic = \"SPV\"\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "24d23591.c8396a",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "to valve read",
        "links": [
            "1dbd41f6.1081ce"
        ],
        "x": 1190,
        "y": 2120,
        "wires": [],
        "l": true
    },
    {
        "id": "1dbd41f6.1081ce",
        "type": "link in",
        "z": "651c65ba.af2eec",
        "name": "to valve read in",
        "links": [
            "24d23591.c8396a"
        ],
        "x": 880,
        "y": 20,
        "wires": [
            [
                "daf966c0.953248"
            ]
        ],
        "l": true
    },
    {
        "id": "8c67bd9.c27ac4",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Valve Mode - FC6 33284",
        "func": "var fc=6;\nvar sa=33284;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 1780,
        "wires": [
            [
                "58f7cd73.7e8a94"
            ]
        ]
    },
    {
        "id": "b89ab00c.aaa58",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Valve Speed - FC6 32803",
        "func": "var fc=6;\nvar sa=32803;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 1720,
        "wires": [
            [
                "58f7cd73.7e8a94"
            ]
        ]
    },
    {
        "id": "a064ee31.884e9",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "alarms- FC3 33536",
        "func": "var fc=3;\nvar sa=33536;\nvar addresses=2;\nmsg.topic = \"Alarm\"\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 2180,
        "wires": [
            [
                "24d23591.c8396a"
            ]
        ]
    },
    {
        "id": "89185a9e.ad01a8",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Status - FC3 33798 16",
        "func": "var fc=3;\nvar sa=33798;\nvar addresses=16;\nmsg.topic = \"LONG\"\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 2100,
        "wires": [
            [
                "24d23591.c8396a",
                "f4129709.ed8cf8"
            ]
        ]
    },
    {
        "id": "1c6fb3a4.4974cc",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "rational fit",
        "func": "var q = global.get(\"Flow\");\nvar q_max = 4.6\n\nvar p1 = 8594\nvar p2 = 4.258\nvar q1 = 6451\nvar q2 = 2322\nvar Q = 52000\n//var Q = 31500\nvar x = q/q_max\n\nf = (p1*x+p2)/(x^2+q1*x+q2)\nmsg.payload = f*Q\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1780,
        "wires": [
            [
                "cc551212.e15ec",
                "8a3ac641.64a2b8"
            ]
        ]
    },
    {
        "id": "b7bc4a6a.b92418",
        "type": "switch",
        "z": "651c65ba.af2eec",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LONG",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SPV",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 890,
        "y": 200,
        "wires": [
            [
                "582c9113.5445e"
            ],
            [
                "48e487e3.f64e48"
            ],
            []
        ]
    },
    {
        "id": "d4010715.2915e8",
        "type": "ui_dropdown",
        "z": "b066e7c5.874fa8",
        "name": "",
        "label": "Speed",
        "tooltip": "",
        "place": "Valve Speed",
        "group": "8dd78c30.ffe35",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "3 sec/mm",
                "value": 1,
                "type": "num"
            },
            {
                "label": "6 sec/mm",
                "value": 2,
                "type": "num"
            },
            {
                "label": "12 sec/mm",
                "value": 3,
                "type": "num"
            },
            {
                "label": "24 sec/mm",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "98b75eac.68f1d"
            ]
        ]
    },
    {
        "id": "c25d42bf.68fde",
        "type": "ui_button",
        "z": "b066e7c5.874fa8",
        "name": "",
        "group": "8dd78c30.ffe35",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Initial Configuration",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 490,
        "y": 100,
        "wires": [
            [
                "1c54fde9.8ddaf2"
            ]
        ]
    },
    {
        "id": "f15ac439.24eee8",
        "type": "link out",
        "z": "b066e7c5.874fa8",
        "name": "valve opening",
        "links": [
            "7fc90694.30e7c8"
        ],
        "x": 1000,
        "y": 400,
        "wires": [],
        "l": true
    },
    {
        "id": "98b75eac.68f1d",
        "type": "link out",
        "z": "b066e7c5.874fa8",
        "name": "valve speed",
        "links": [
            "93665ee5.cca83"
        ],
        "x": 1015,
        "y": 160,
        "wires": [],
        "l": true
    },
    {
        "id": "1c54fde9.8ddaf2",
        "type": "link out",
        "z": "b066e7c5.874fa8",
        "name": "valve config",
        "links": [],
        "x": 1030,
        "y": 100,
        "wires": [],
        "l": true
    },
    {
        "id": "7fc90694.30e7c8",
        "type": "link in",
        "z": "651c65ba.af2eec",
        "name": "Valve Opening in",
        "links": [
            "f15ac439.24eee8",
            "d1fb832d.4f0d"
        ],
        "x": 415,
        "y": 1840,
        "wires": [
            [
                "7e15a5bc.5bf7ec"
            ]
        ]
    },
    {
        "id": "93665ee5.cca83",
        "type": "link in",
        "z": "651c65ba.af2eec",
        "name": "Valve Speed In",
        "links": [
            "98b75eac.68f1d"
        ],
        "x": 440,
        "y": 1720,
        "wires": [
            [
                "b89ab00c.aaa58"
            ]
        ]
    },
    {
        "id": "bfc4dd67.c5cb3",
        "type": "ui_dropdown",
        "z": "b066e7c5.874fa8",
        "name": "",
        "label": "Mode",
        "tooltip": "",
        "place": "Valve Mode",
        "group": "8dd78c30.ffe35",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Normal",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Calibration",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Flush",
                "value": 3,
                "type": "num"
            },
            {
                "label": "De-Air",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Alarm",
                "value": 5,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 450,
        "y": 220,
        "wires": [
            [
                "939e1143.2c4a8"
            ]
        ]
    },
    {
        "id": "939e1143.2c4a8",
        "type": "link out",
        "z": "b066e7c5.874fa8",
        "name": "Valve Mode",
        "links": [
            "71b50436.da647c"
        ],
        "x": 1010,
        "y": 220,
        "wires": [],
        "l": true
    },
    {
        "id": "71b50436.da647c",
        "type": "link in",
        "z": "651c65ba.af2eec",
        "name": "Valve Mode in",
        "links": [
            "939e1143.2c4a8"
        ],
        "x": 400,
        "y": 1780,
        "wires": [
            [
                "8c67bd9.c27ac4"
            ]
        ]
    },
    {
        "id": "c4413b70.6dd9a8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "to valve ",
        "links": [
            "d37a5676.cf7a48"
        ],
        "x": 200,
        "y": 3060,
        "wires": [],
        "l": true
    },
    {
        "id": "d37a5676.cf7a48",
        "type": "link in",
        "z": "651c65ba.af2eec",
        "name": "to valve in",
        "links": [
            "c4413b70.6dd9a8"
        ],
        "x": 440,
        "y": 2020,
        "wires": [
            [
                "d01dc1c1.ae1c4"
            ]
        ]
    },
    {
        "id": "582c9113.5445e",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "to data",
        "links": [
            "11c95131.0c8b5f"
        ],
        "x": 1100,
        "y": 140,
        "wires": []
    },
    {
        "id": "4fd688f7.a60a18",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Total Opp Hours 33798",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 33798\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 33798\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 2320,
        "wires": [
            [
                "3b2732a5.312d3e"
            ]
        ]
    },
    {
        "id": "18982fa3.2ba78",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Lifetime Estimate 33800",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 33800\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 33798\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 2380,
        "wires": [
            [
                "d7ff99b2.ef66f8"
            ]
        ]
    },
    {
        "id": "a9021bfc.f02bf8",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Min since power 33808",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 33808\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 33798\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 809.5,
        "y": 2436.25,
        "wires": [
            [
                "81cf82ad.e9c52"
            ]
        ]
    },
    {
        "id": "ecfc97f.9c7bb68",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Min since cali 33810",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 33810\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 33798\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 2500,
        "wires": [
            [
                "9a882a7e.7c1438"
            ]
        ]
    },
    {
        "id": "c871357.889d4c8",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Min since closed 33812",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 33812\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 33798\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 2560,
        "wires": [
            [
                "5e14046d.484e6c"
            ]
        ]
    },
    {
        "id": "ba946855.f6b978",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Min since open 33814",
        "func": "// The purpose of this block is to make it use to extract information \n// from the modbus read output block which covers everything from\n// Address 301 to 362 with respect to the MODbus functional profile\n\n\n// Firstly, define the MODbus address you are interested in as stated\n// in the functional profile\n// example if you want to read the pump head on address 301\n// then modbus_add = 301 \nvar Modbus_add = 33814\n\n// Some addresses are a 32bit, which is indicated by the functional \n// profile, as having a HI and LO part on seperate addresses\n// Example is Opperation time, which is on address 327 and 328\n// if you want to read one of these 32bit addresses, change the \n// Double_add from \"false\" to \"true\". The address should be the first\n// of the double, so from previous example, Modbus_add = 327\n\nvar Double_add = true\n\n// the code below will now extract and format the data point you have \n// selected. you will not need to change anything below\n\nvar index = Modbus_add - 33798\nvar msg1 ={'payload' : {'data' : [],'buffer': []}}\n\nif (Double_add === true){\n\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]//\nindex = index+1\nmsg1.payload.data[1] = msg.payload.data[index]//PowerLO\nmsg1.payload.buffer[2] = msg.payload.buffer[index*2]//\nmsg1.payload.buffer[3] = msg.payload.buffer[index*2+1]//\n\n// Create new Buffer based on array bytes\nconst buf = Buffer.from(msg1.payload.buffer);\n\n// Represent these bytes as 32-bit unsigned int\nconst value = buf.readUInt32BE();\n\n// save the value\nmsg1.payload.data = value;    \n}\nelse {\nmsg1.payload.data[0] = msg.payload.data[index]\nmsg1.payload.buffer[0] = msg.payload.buffer[index*2]\nmsg1.payload.buffer[1] = msg.payload.buffer[index*2+1]\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 2620,
        "wires": [
            [
                "e7b938d3.275678"
            ]
        ]
    },
    {
        "id": "11c95131.0c8b5f",
        "type": "link in",
        "z": "651c65ba.af2eec",
        "name": "",
        "links": [
            "582c9113.5445e"
        ],
        "x": 420,
        "y": 2320,
        "wires": [
            [
                "4fd688f7.a60a18",
                "18982fa3.2ba78",
                "a9021bfc.f02bf8",
                "ecfc97f.9c7bb68",
                "c871357.889d4c8",
                "ba946855.f6b978"
            ]
        ]
    },
    {
        "id": "3b2732a5.312d3e",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "valve opp hours",
        "links": [
            "f9bd1caf.10e86"
        ],
        "x": 1100,
        "y": 2320,
        "wires": []
    },
    {
        "id": "d7ff99b2.ef66f8",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "valve est life",
        "links": [
            "1c0729f3.b128d6"
        ],
        "x": 1095,
        "y": 2380,
        "wires": []
    },
    {
        "id": "81cf82ad.e9c52",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "valve min since power",
        "links": [
            "808f2b97.2687b8"
        ],
        "x": 1095,
        "y": 2440,
        "wires": []
    },
    {
        "id": "9a882a7e.7c1438",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "valve min since cali",
        "links": [
            "59b62897.9c2a88"
        ],
        "x": 1095,
        "y": 2500,
        "wires": []
    },
    {
        "id": "5e14046d.484e6c",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "valve min since closed",
        "links": [
            "2a86edc3.bc2e52"
        ],
        "x": 1095,
        "y": 2560,
        "wires": []
    },
    {
        "id": "e7b938d3.275678",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "valve min since open",
        "links": [
            "68ecfa38.4f20e4"
        ],
        "x": 1095,
        "y": 2620,
        "wires": []
    },
    {
        "id": "5ef872f7.b7088c",
        "type": "ui_numeric",
        "z": "b066e7c5.874fa8",
        "name": "",
        "label": "Valve Opening",
        "tooltip": "",
        "group": "8dd78c30.ffe35",
        "order": 4,
        "width": "0",
        "height": "0",
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} %",
        "min": 0,
        "max": "100",
        "step": "5",
        "x": 500,
        "y": 440,
        "wires": [
            [
                "f15ac439.24eee8"
            ]
        ]
    },
    {
        "id": "f7c35a90.acb508",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "group": "7185a1fe.34f35",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Total Opperational Hours",
        "format": "{{msg.payload.data}}",
        "layout": "row-spread",
        "x": 1030,
        "y": 500,
        "wires": []
    },
    {
        "id": "d52c9459.270638",
        "type": "inject",
        "z": "b066e7c5.874fa8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "d4010715.2915e8"
            ]
        ]
    },
    {
        "id": "b152e6a2.3eed68",
        "type": "inject",
        "z": "b066e7c5.874fa8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "bfc4dd67.c5cb3"
            ]
        ]
    },
    {
        "id": "1dd5374a.2d6ad9",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "d": true,
        "group": "7185a1fe.34f35",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Lifetime expended",
        "format": "{{msg.payload.data}} %",
        "layout": "row-spread",
        "x": 1010,
        "y": 560,
        "wires": []
    },
    {
        "id": "c9335e2e.a905f",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "group": "7185a1fe.34f35",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Min Sinced Powered",
        "format": "{{msg.payload.data}}",
        "layout": "row-spread",
        "x": 1020,
        "y": 620,
        "wires": []
    },
    {
        "id": "daca3ef1.e9848",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "group": "7185a1fe.34f35",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Min Sinced Calibrated",
        "format": "{{msg.payload.data}}",
        "layout": "row-spread",
        "x": 1020,
        "y": 680,
        "wires": []
    },
    {
        "id": "e6a1805d.b08dd",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "group": "7185a1fe.34f35",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Min Sinced Closed",
        "format": "{{msg.payload.data}}",
        "layout": "row-spread",
        "x": 1010,
        "y": 740,
        "wires": []
    },
    {
        "id": "79bd2672.c1c3c8",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "group": "7185a1fe.34f35",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Min Sinced Opened",
        "format": "{{msg.payload.data}}",
        "layout": "row-spread",
        "x": 990,
        "y": 800,
        "wires": []
    },
    {
        "id": "f9bd1caf.10e86",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "3b2732a5.312d3e"
        ],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "f7c35a90.acb508"
            ]
        ]
    },
    {
        "id": "1c0729f3.b128d6",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "d7ff99b2.ef66f8"
        ],
        "x": 455,
        "y": 560,
        "wires": [
            [
                "1dd5374a.2d6ad9"
            ]
        ]
    },
    {
        "id": "808f2b97.2687b8",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "81cf82ad.e9c52"
        ],
        "x": 455,
        "y": 620,
        "wires": [
            [
                "c9335e2e.a905f"
            ]
        ]
    },
    {
        "id": "59b62897.9c2a88",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "9a882a7e.7c1438"
        ],
        "x": 455,
        "y": 660,
        "wires": [
            [
                "daca3ef1.e9848"
            ]
        ]
    },
    {
        "id": "2a86edc3.bc2e52",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "5e14046d.484e6c"
        ],
        "x": 455,
        "y": 700,
        "wires": [
            [
                "e6a1805d.b08dd"
            ]
        ]
    },
    {
        "id": "68ecfa38.4f20e4",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "e7b938d3.275678"
        ],
        "x": 455,
        "y": 740,
        "wires": [
            [
                "79bd2672.c1c3c8"
            ]
        ]
    },
    {
        "id": "45abcdfc.ff1114",
        "type": "ui_chart",
        "z": "b066e7c5.874fa8",
        "name": "Flow Chart",
        "group": "bb2dbcc9.07f63",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Pump Flow",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1010,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "99dbd0ad.c5423",
        "type": "ui_chart",
        "z": "b066e7c5.874fa8",
        "name": "Head Chart",
        "group": "bb2dbcc9.07f63",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "Pump Head",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "12",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1010,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "228ecbfe.dae294",
        "type": "ui_gauge",
        "z": "b066e7c5.874fa8",
        "name": "RPM",
        "group": "bb2dbcc9.07f63",
        "order": 5,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "RPM",
        "format": "{{msg.payload.data[0] | uppercase}}",
        "min": "1300",
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 990,
        "y": 900,
        "wires": []
    },
    {
        "id": "f1111494.9793a8",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "group": "bb2dbcc9.07f63",
        "order": 1,
        "width": "3",
        "height": "1",
        "name": "Flow Value",
        "label": "Flow:",
        "format": "{{msg.payload}} m<sup>3</sup>/h",
        "layout": "row-left",
        "x": 1010,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e0b81866.6ea5d8",
        "type": "ui_text",
        "z": "b066e7c5.874fa8",
        "group": "bb2dbcc9.07f63",
        "order": 2,
        "width": "3",
        "height": "1",
        "name": "Head Value",
        "label": "Head:",
        "format": "{{msg.payload}} m",
        "layout": "row-left",
        "x": 1010,
        "y": 1140,
        "wires": []
    },
    {
        "id": "18c1fc13.b92e14",
        "type": "ui_gauge",
        "z": "b066e7c5.874fa8",
        "name": "kW Gauge",
        "group": "bb2dbcc9.07f63",
        "order": 6,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "kW",
        "format": "{{msg.payload.data[0] | uppercase}}",
        "min": "0",
        "max": "400",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1010,
        "y": 1200,
        "wires": []
    },
    {
        "id": "aa34a2a4.f0413",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "fd18d18e.75773",
            "f5c4fb46.8f2e88",
            "6e89ac88.ae7414"
        ],
        "x": 875,
        "y": 900,
        "wires": [
            [
                "228ecbfe.dae294"
            ]
        ]
    },
    {
        "id": "d014a8c5.f34998",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "a2b59264.1bd93",
            "8c809dae.e3377",
            "2545240f.33092c"
        ],
        "x": 875,
        "y": 960,
        "wires": [
            [
                "45abcdfc.ff1114",
                "f1111494.9793a8"
            ]
        ]
    },
    {
        "id": "1894e6c6.510e19",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "aef19316.51085",
            "4cf4b66c.14e348",
            "d3f2e4b2.919ad8"
        ],
        "x": 875,
        "y": 1080,
        "wires": [
            [
                "99dbd0ad.c5423",
                "e0b81866.6ea5d8"
            ]
        ]
    },
    {
        "id": "513199c.2154968",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "f1be094c.54d548",
            "d6bfd62d.c07ba8",
            "f5cbe01d.8fd82"
        ],
        "x": 875,
        "y": 1200,
        "wires": [
            [
                "18c1fc13.b92e14"
            ]
        ]
    },
    {
        "id": "87f5ae90.d70de",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "317a4aa2.10a196"
        ],
        "x": 1035,
        "y": 260,
        "wires": [
            [
                "d3900acc.f38e08",
                "c60b8e53.ff4c4",
                "cef7d60.0336128"
            ]
        ]
    },
    {
        "id": "d35bf42.005de08",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "317a4aa2.10a196"
        ],
        "x": 815,
        "y": 1020,
        "wires": [
            [
                "45abcdfc.ff1114",
                "99dbd0ad.c5423"
            ]
        ]
    },
    {
        "id": "53f986cc.ddf148",
        "type": "inject",
        "z": "8e025641.d38868",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 810,
        "y": 1300,
        "wires": [
            [
                "f9b47b7a.8ce028"
            ]
        ]
    },
    {
        "id": "6563a96e.3c5808",
        "type": "ui_chart",
        "z": "8e025641.d38868",
        "name": "",
        "group": "e9d68c7e.c2fed",
        "order": 8,
        "width": "6",
        "height": "6",
        "label": "Return Water Temp (RWT)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "10",
        "ymax": "24",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 2290,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "2e13de3b.fdcb62",
        "type": "ui_chart",
        "z": "8e025641.d38868",
        "name": "",
        "group": "e9d68c7e.c2fed",
        "order": 6,
        "width": "6",
        "height": "6",
        "label": "Supply Air Temp (SAT)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "12",
        "ymax": "28",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 2220,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "ba7905db.dd2498",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1460,
        "wires": [
            [
                "6563a96e.3c5808",
                "2e13de3b.fdcb62",
                "78b73203.c60a2c",
                "a184cc5.85b0a3",
                "d2640b62.73e8f8",
                "254ba8e6.24b308"
            ]
        ]
    },
    {
        "id": "71418a91.79de74",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "317a4aa2.10a196"
        ],
        "x": 1075,
        "y": 540,
        "wires": [
            [
                "a184cc5.85b0a3",
                "78b73203.c60a2c",
                "d2640b62.73e8f8",
                "254ba8e6.24b308"
            ]
        ]
    },
    {
        "id": "d476cc36.c6a7",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Actual SetPoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1960,
        "y": 660,
        "wires": []
    },
    {
        "id": "c1d0fede.ab671",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Actual FlowLimit",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1960,
        "y": 720,
        "wires": []
    },
    {
        "id": "fd69b7d1.a1b5f8",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Remote Control:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1960,
        "y": 460,
        "wires": []
    },
    {
        "id": "9faae946.87d168",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Start / Stop:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 420,
        "wires": []
    },
    {
        "id": "dae77770.6d49c8",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "FlowLIMIT:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 540,
        "wires": []
    },
    {
        "id": "e591dd41.d331e",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Control Mode",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1960,
        "y": 600,
        "wires": []
    },
    {
        "id": "e84f1bae.8b0d18",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "e8521bba.edeff8",
            "bcbd680d.1e2548"
        ],
        "x": 1615,
        "y": 420,
        "wires": [
            [
                "9faae946.87d168"
            ]
        ]
    },
    {
        "id": "6be21c.69d85de4",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "e9e83e7f.4bc83",
            "c43ad46c.b5cd28"
        ],
        "x": 1615,
        "y": 460,
        "wires": [
            [
                "fd69b7d1.a1b5f8"
            ]
        ]
    },
    {
        "id": "eca15409.1f11f8",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "683bc76a.1f89a8",
            "d4962b58.4ec068"
        ],
        "x": 1615,
        "y": 540,
        "wires": [
            [
                "dae77770.6d49c8"
            ]
        ]
    },
    {
        "id": "c8b04249.2c53c",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "a6485d81.d9d4a",
            "482a08b1.c5d5b8"
        ],
        "x": 1615,
        "y": 600,
        "wires": [
            [
                "e591dd41.d331e"
            ]
        ]
    },
    {
        "id": "826c494d.782e18",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "369cdd9f.add602",
            "6b8133e4.28bc2c",
            "d1dc324f.0537"
        ],
        "x": 1615,
        "y": 660,
        "wires": [
            [
                "d476cc36.c6a7"
            ]
        ]
    },
    {
        "id": "329c3af1.4d8d36",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "13396b70.3389d5",
            "eb684cac.c2877",
            "80a06905.9cdd48"
        ],
        "x": 1615,
        "y": 740,
        "wires": [
            [
                "c1d0fede.ab671"
            ]
        ]
    },
    {
        "id": "e864dbd8.9e4c58",
        "type": "ui_numeric",
        "z": "8e025641.d38868",
        "name": "",
        "label": "Setpoint",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 7,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} &deg C",
        "min": "12",
        "max": "18",
        "step": 1,
        "x": 260,
        "y": 2420,
        "wires": [
            [
                "e264a0c6.9b016",
                "230a850c.380b0a"
            ]
        ]
    },
    {
        "id": "e264a0c6.9b016",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "temp to setpoint",
        "func": "var min = global.get(\"min_temp\")\nvar max = global.get(\"max_temp\")\nvar sensor_min = global.get(\"sensor_min\")\nvar sensor_max = global.get(\"sensor_max\")\n    \nvar r_max = max\nvar r_min = min\nvar tmp = msg.payload\nsetpoint = ((tmp-r_min)/(r_max-r_min))*10000\nmsg.payload = setpoint\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 2600,
        "wires": [
            [
                "9e9734bb.1248b8"
            ]
        ]
    },
    {
        "id": "eef3ce4.3bae53",
        "type": "ui_switch",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "label": "Pump / Valve Mode",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "valve",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "pump",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 170,
        "y": 2280,
        "wires": [
            [
                "9e9734bb.1248b8",
                "e7243153.1f8e3",
                "e0337605.c6a948",
                "50c5117e.83fcc",
                "6e7b67e.169bf98",
                "1a41372d.070429"
            ]
        ]
    },
    {
        "id": "2a1ca63e.b3b5da",
        "type": "PID",
        "z": "8e025641.d38868",
        "name": "",
        "setpoint": "13",
        "pb": 1,
        "ti": "10",
        "td": 0,
        "integral_default": 0.5,
        "smooth_factor": 3,
        "max_interval": 600,
        "enable": 1,
        "disabled_op": 0,
        "x": 1010,
        "y": 2320,
        "wires": [
            [
                "3703330f.8c704c"
            ]
        ]
    },
    {
        "id": "3703330f.8c704c",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "Scale",
        "func": "msg.payload = (1-msg.payload)*100\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 2320,
        "wires": [
            [
                "d1fb832d.4f0d"
            ]
        ]
    },
    {
        "id": "d1fb832d.4f0d",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "valve opening",
        "links": [
            "7fc90694.30e7c8"
        ],
        "x": 1700,
        "y": 2320,
        "wires": [],
        "l": true
    },
    {
        "id": "230a850c.380b0a",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "setpoint",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 2340,
        "wires": [
            [
                "2a1ca63e.b3b5da"
            ]
        ]
    },
    {
        "id": "9e9734bb.1248b8",
        "type": "traffic",
        "z": "8e025641.d38868",
        "name": "",
        "property_allow": "payload",
        "filter_allow": "pump",
        "ignore_case_allow": false,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "payload",
        "filter_stop": "valve",
        "ignore_case_stop": false,
        "negate_stop": false,
        "send_stop": false,
        "default_start": true,
        "differ": false,
        "x": 1250,
        "y": 2600,
        "wires": [
            [
                "53cb02d3.0747bc"
            ]
        ]
    },
    {
        "id": "da377072.7eade",
        "type": "widgetlords-vpe-3011b-sdafe",
        "z": "8e025641.d38868",
        "name": "",
        "channel": "6",
        "input_type": "7",
        "interval": "2000",
        "x": 450,
        "y": 760,
        "wires": [
            [
                "21d181ad.d2e70e"
            ]
        ]
    },
    {
        "id": "21d181ad.d2e70e",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "scaling",
        "func": "var DP = (msg.payload/10000)*0.6*10\nmsg.payload=parseFloat(DP).toFixed(2);\nmsg.topic = \"DP Sensor\"\nflow.set(\"DP\",DP)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 760,
        "wires": [
            [
                "78b73203.c60a2c"
            ]
        ]
    },
    {
        "id": "3c952c4b.5337e4",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Pump Head",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 660,
        "wires": [
            [
                "78b73203.c60a2c"
            ]
        ]
    },
    {
        "id": "26bc4a80.a02816",
        "type": "change",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DP",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 2420,
        "wires": [
            [
                "2720cebb.7775f2"
            ]
        ]
    },
    {
        "id": "2720cebb.7775f2",
        "type": "PID",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "setpoint": "1",
        "pb": 1,
        "ti": "10",
        "td": 0,
        "integral_default": 0.5,
        "smooth_factor": 3,
        "max_interval": 600,
        "enable": 1,
        "disabled_op": 0,
        "x": 1190,
        "y": 2420,
        "wires": [
            [
                "3a3bd281.f7f52e"
            ]
        ]
    },
    {
        "id": "e7243153.1f8e3",
        "type": "traffic",
        "z": "8e025641.d38868",
        "d": true,
        "name": "",
        "property_allow": "payload",
        "filter_allow": "valve",
        "ignore_case_allow": false,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "pump",
        "filter_stop": "stop",
        "ignore_case_stop": false,
        "negate_stop": false,
        "send_stop": false,
        "default_start": false,
        "differ": false,
        "x": 1510,
        "y": 2420,
        "wires": [
            [
                "53cb02d3.0747bc"
            ]
        ]
    },
    {
        "id": "3a3bd281.f7f52e",
        "type": "function",
        "z": "8e025641.d38868",
        "d": true,
        "name": "scale",
        "func": "msg.payload = msg.payload*10000\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1340,
        "y": 2440,
        "wires": [
            [
                "e7243153.1f8e3"
            ]
        ]
    },
    {
        "id": "3e8337c3.c37638",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Control Mode",
        "links": [
            "4ee910df.0f5bb"
        ],
        "x": 1460,
        "y": 2900,
        "wires": [],
        "l": true
    },
    {
        "id": "32c3acf8.337714",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "BMS ON/OFF",
        "links": [
            "765db47f.d0042c"
        ],
        "x": 1460,
        "y": 2960,
        "wires": [],
        "l": true
    },
    {
        "id": "f70d1c06.5de01",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "GO/STOP",
        "links": [
            "5d2035e.d723acc"
        ],
        "x": 1440,
        "y": 3020,
        "wires": [],
        "l": true
    },
    {
        "id": "23a897ff.ee9898",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Set FlowLimit",
        "links": [
            "d76bd6a5.9d8c58"
        ],
        "x": 1460,
        "y": 3120,
        "wires": [],
        "l": true
    },
    {
        "id": "3f5703fa.5ab35c",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Enable FlowLimit",
        "links": [
            "8f0692b7.1ae0d"
        ],
        "x": 1470,
        "y": 3080,
        "wires": [],
        "l": true
    },
    {
        "id": "866e5f0e.b62fe",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Const. Temp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "8",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3060,
        "wires": [
            [
                "3e8337c3.c37638",
                "173f953b.a5731b"
            ]
        ]
    },
    {
        "id": "173f953b.a5731b",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "BMS, GO, FlowLimit",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 3120,
        "wires": [
            [
                "32c3acf8.337714",
                "f70d1c06.5de01",
                "3f5703fa.5ab35c",
                "dfbe5265.b9b7"
            ]
        ]
    },
    {
        "id": "dfbe5265.b9b7",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Define FlowLimit",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "5",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 3180,
        "wires": [
            [
                "23a897ff.ee9898",
                "798fcc00.8c5ca4"
            ]
        ]
    },
    {
        "id": "37a240a8.2a56b",
        "type": "delay",
        "z": "8e025641.d38868",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 570,
        "y": 1960,
        "wires": [
            [
                "6ce46225.466d9c"
            ]
        ]
    },
    {
        "id": "798fcc00.8c5ca4",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Setpoint",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1300",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 3240,
        "wires": [
            [
                "cc39cac7.c24b38",
                "f3e6af03.fb1e2"
            ]
        ]
    },
    {
        "id": "765db47f.d0042c",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "to bms on/off",
        "links": [
            "32c3acf8.337714"
        ],
        "x": 55,
        "y": 280,
        "wires": [
            [
                "32c89a66.b32156",
                "d09b7a42.f769f8"
            ]
        ]
    },
    {
        "id": "5d2035e.d723acc",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "to start stop",
        "links": [
            "f70d1c06.5de01"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "dd510898.341cd8",
                "26181a9.b3b52e6"
            ]
        ]
    },
    {
        "id": "8f0692b7.1ae0d",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "to enable flowlimit",
        "links": [
            "3f5703fa.5ab35c"
        ],
        "x": 235,
        "y": 1120,
        "wires": [
            [
                "515384a7.60609c"
            ]
        ]
    },
    {
        "id": "4ee910df.0f5bb",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "to control mode",
        "links": [
            "3e8337c3.c37638"
        ],
        "x": 275,
        "y": 1160,
        "wires": [
            [
                "4ec6cf46.429a1"
            ]
        ]
    },
    {
        "id": "d76bd6a5.9d8c58",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "too flow limit",
        "links": [
            "23a897ff.ee9898"
        ],
        "x": 215,
        "y": 1260,
        "wires": [
            [
                "a8617fa1.61aa6"
            ]
        ]
    },
    {
        "id": "56065ced.3ff764",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "Format Data",
        "func": "// this is where you define the legend for \n// the datasets\nvar title = \"Pump Duty Point\";\nvar legend1 = \"legend1\";\n\n// variables to be used to \nvar i, x, y, data1\ndata1 = flow.get('data1')||'';\n\nvar count = flow.get('count')||0;\ncount += 1;\nif (count > 998) {\n    count = 1;\n    data1 = '{x: 0,  y: 0},'; // Force the size of the\n} \n// store the value back\nflow.set('count',count);\n// make it part of the outgoing msg object\nmsg.count = count;\n\n// for dataset #1\n// this code generates one x/y point \n// between -100 and +100 and a random \n//size between 1 and 10\n//node.warn(\"db1=\"+data1);\nx = global.get('Flow')||0;\ny = global.get('head')||0;\n\ndata1 += \"{x: \"+x+\", y: \"+y+\"},\";\n//node.warn(\"db2=\"+data1);\n// this line removes the last comma to end the dataset\ndata1 = data1.replace(/^(.*),(.*?)$/, '$1')\n\n// Now we build msg.payload\nmsg.payload = { \"title\"   : title,\n                \"legend1\" : legend1,\n                \"data1\"   : data1,\n                };\ndata1 += \",\";\n\n//flow.set([\"data1\", \"data2\"], [data1, data2]);\nflow.set([\"data1\"], [data1]);\n\nreturn msg;\n\n// this code gets a random interger\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1830,
        "y": 1000,
        "wires": [
            [
                "225ba7f4.2f47c8"
            ]
        ]
    },
    {
        "id": "225ba7f4.2f47c8",
        "type": "template",
        "z": "8e025641.d38868",
        "name": "Format HTML",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<canvas id=\"bubble-chart\" width=\"90%\" height=\"90%\" margin=\"auto\"></canvas>\n\n<script>\nnew Chart(document.getElementById(\"bubble-chart\"), {\n    type: 'scatter',\n    data: {\n      labels: \"label\",\n      datasets: [\n        {\n          label: \"{{{payload.legend1}}}\",\n          backgroundColor: \"rgba(65, 72, 255, 1.0000)\",\n          borderColor: \"#000\",\n          fill: false,\n          showLine: false,\n          data: [\n            {{{payload.data1}}}\n\n          ]\n        }\n      ]\n    },\n    options: {\n        animation: false,\n        legend: {\n            display: false,\n            labels: {\n                fontColor: 'rgb(255, 255, 255)'\n            }\n        },\n    title: {\n        display: false,\n        text: '{{{payload.title}}}',\n        fontColor: 'rgb(255, 255, 255)'\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero:true,\n            fontColor: 'rgb(255, 255, 255,0.5)',\n            suggestedMax: 6,\n          },\n          gridLines: {\n            display: true,\n            drawBorder: true,\n            color: 'rgb(255, 255, 255,0.1)',\n        },\n          scaleLabel: {\n            display: true,\n            labelString: \"Head [m]\",\n            fontColor: 'rgb(255, 255, 255)',\n            \n          },\n         \n        }],\n        xAxes: [{ \n          ticks: {\n            beginAtZero:true,\n            fontColor: 'rgb(255, 255, 255,0.5)',\n            suggestedMax: 5,\n          },\n          gridLines: {\n            display: true,\n            drawBorder: true,\n            color: 'rgb(255, 255, 255,0.1)',\n        },\n          scaleLabel: {\n            display: true,\n            labelString: \"Flow [m\\u00B3/h]\",\n            fontColor: 'rgb(255, 255, 255)',\n            \n          }\n        }]\n      }\n    }\n});\n\n</script>\n",
        "output": "str",
        "x": 1900,
        "y": 1060,
        "wires": [
            [
                "26825313.33462c"
            ]
        ]
    },
    {
        "id": "26825313.33462c",
        "type": "ui_template",
        "z": "8e025641.d38868",
        "group": "8911427a.03002",
        "name": "Scatter Plot",
        "order": 0,
        "width": "6",
        "height": "6",
        "format": "this will be ignored",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1890,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "d2640b62.73e8f8",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "data1",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "count",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b7062e86.a17e9",
        "type": "ui_button",
        "z": "8e025641.d38868",
        "name": "help",
        "group": "3c1be052.4e291",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "mi-help_outline",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "c8580ba5.f0d028"
            ]
        ]
    },
    {
        "id": "fab35c7e.4da09",
        "type": "ui_button",
        "z": "8e025641.d38868",
        "name": "information",
        "group": "3c1be052.4e291",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "mi-info_outline",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 420,
        "wires": [
            [
                "d1053f80.00f18"
            ]
        ]
    },
    {
        "id": "346fdfe1.142f",
        "type": "ui_toast",
        "z": "8e025641.d38868",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 570,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d1053f80.00f18",
        "type": "template",
        "z": "8e025641.d38868",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n\n<body >\n<h1 style=\"max-width:600px\">\n    Grundfos Distributed Pumping Temperature Control Demo\n</h1>\n<p style=\"max-width:600px\">\n    The purpose of this demo is to showcase the MAGNA3 capabilities within temperature control and other features. For this purpose, simplified thermodynamic equations are implemented in the Dedicated Control Unit (DCU), to simulate the temperature response of a coil supplied by chilled water. The coil is assumed to be ideal performance, meaning that the coil characteristic follows the prescribed curve with no deviations. \n</p>\n<p style=\"max-width:600px\">\n<img src=\"/intro.png\" alt=\"intro\" style=\"width:100%;height:auto;background-color:#FFFFFF\" >\n</p>\n<p style=\"max-width:600px\">\n    The demo offers two different control options, a DPS coil pump mode and a PICV mode. The following sections will explain the difference between these two modes. The flow meter reading is used as an input for the Coil Power output curve for both modes.\n</p>\n<h2 style=\"max-width:600px\">DPS Coil Pump Mode</h2>\n<p style=\"max-width:600px\">\n    In this mode, the pump the controller is passing the simulated Supply Air Temperature (SAT) to the as an analog signal in the 0-10V range. \n</p>\n<p style=\"max-width:600px\">\n<img src=\"/dps_ahu.PNG\" alt=\"DPS AHU\" style=\"width:100%;height:auto;\" >\n</p>\n<p style=\"max-width:600px\">\n    The pump is using its’ Constant Temperature Control mode, which automatically adjusts the speed of the pump, and thereby the flow in the system, according to the load in the simulation and the setpoint defined via the Dashboard. It is possible to change the Controller parameters, Kp and Ti which are respectively the Proportional- and Integrator constants. This will affect the pumps response and serve to showcase and educate the impact of tuning the Controller in the pump\n</p>\n\n<h2 style=\"max-width:600px\">PICV Mode</h2>\n<p style=\"max-width:600px\">\n    In this mode, the flow is controlled via a PICV valve which lift-percentage is controlled by DCU which is using a PI-controller to maintain the SUT at the defined Setpoint.\n</p>\n<p style=\"max-width:600px\">\n<img src=\"/valve_ahu.PNG\" alt=\"Valve AHU\" style=\"width:100%;height:auto;\" >\n</p>\n<p style=\"max-width:600px\">\n   In this mode, the pump is serving as a pressure source, and operates in Constant Head Control mode. This is representative of ASHRAE’s recommendation of maintaining a constant differential pressure across the Index branch, as the pump head in this small closed-loop demo is equal to the differential pressure across the whole demo loop.<br>\n   It is possible to configure the travel speed of the PICV, but as default it is set to 24 sec/mm which is the factory default speed of this particular PICV.\n</p>\n\n</body>\n</html>\n",
        "output": "str",
        "x": 390,
        "y": 420,
        "wires": [
            [
                "346fdfe1.142f"
            ]
        ]
    },
    {
        "id": "d81ad822.7777c8",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 380,
        "y": 2600,
        "wires": []
    },
    {
        "id": "12043a28.b09486",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Valve Type - FC3 32802",
        "func": "var fc=3;\nvar sa=32802;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 120,
        "wires": [
            [
                "ed5794f3.437038",
                "daf966c0.953248"
            ]
        ]
    },
    {
        "id": "e0b894.5809c77",
        "type": "function",
        "z": "dff53b0e.d3f2c8",
        "name": "Flowmeter - FC3 0 2",
        "func": "var fc=3;\nvar sa=0;\nvar addresses=2;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 97, 'address': sa , 'quantity': addresses };\n//msg.topic = \"Flow Meter\"\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 100,
        "wires": [
            [
                "ecc44730.913e08"
            ]
        ]
    },
    {
        "id": "ecc44730.913e08",
        "type": "modbus-flex-getter",
        "z": "dff53b0e.d3f2c8",
        "name": "Read Valve",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "276147dc.e6e7f8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1170,
        "y": 80,
        "wires": [
            [],
            [
                "ae0bfcd.b7989",
                "8679369a.58a108"
            ]
        ]
    },
    {
        "id": "5705ad21.7dc7e4",
        "type": "inject",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 40,
        "wires": [
            [
                "e0b894.5809c77"
            ]
        ]
    },
    {
        "id": "ae0bfcd.b7989",
        "type": "debug",
        "z": "dff53b0e.d3f2c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1390,
        "y": 80,
        "wires": []
    },
    {
        "id": "8679369a.58a108",
        "type": "function",
        "z": "dff53b0e.d3f2c8",
        "name": "32 bit float read - flow",
        "func": "\nvar lg = msg.payload.data.length\n\nif (lg > 1){\n\nconst buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readFloatBE();\nmsg.payload = value*0.001; //m3/h\n}\nmsg.topic = \"Flow Meter\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1400,
        "y": 180,
        "wires": [
            [
                "ae0bfcd.b7989"
            ]
        ]
    },
    {
        "id": "3ad7bd2c.fab2c2",
        "type": "inject",
        "z": "a006c3c.49c7b4",
        "d": true,
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "5689bd26.2bf284"
            ]
        ]
    },
    {
        "id": "5689bd26.2bf284",
        "type": "function",
        "z": "a006c3c.49c7b4",
        "name": "Flowmeter - FC3 0 2",
        "func": "var fc=3;\nvar sa=0;\nvar addresses=2;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 97, 'address': sa , 'quantity': addresses };\n//msg.topic = \"Flow Meter\"\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 160,
        "wires": [
            [
                "75e8b633.f71748"
            ]
        ]
    },
    {
        "id": "75e8b633.f71748",
        "type": "modbus-flex-getter",
        "z": "a006c3c.49c7b4",
        "name": "Read Valve",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "276147dc.e6e7f8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 630,
        "y": 140,
        "wires": [
            [],
            [
                "6c155c9f.7c76e4"
            ]
        ]
    },
    {
        "id": "6c155c9f.7c76e4",
        "type": "function",
        "z": "a006c3c.49c7b4",
        "name": "32 bit float read - flow",
        "func": "\nvar lg = msg.payload.data.length\nvar flow\nif (lg > 1){\n\nconst buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readFloatBE();\nflow = value*0.001; //m3/h\n}\nmsg.payload = parseFloat(flow.toFixed(1));\nmsg.topic = \"Flow Meter\"\nglobal.set(\"Flow\",flow)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 240,
        "wires": [
            [
                "1bae50b.64892af"
            ]
        ]
    },
    {
        "id": "1bae50b.64892af",
        "type": "link out",
        "z": "a006c3c.49c7b4",
        "name": "flowmeter",
        "links": [
            "8524019f.447c5",
            "69c6232e.720bcc",
            "a3c7b322.2011b"
        ],
        "x": 1040,
        "y": 240,
        "wires": []
    },
    {
        "id": "8524019f.447c5",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "1bae50b.64892af"
        ],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "d3900acc.f38e08",
                "4c362ea4.e8226",
                "88ef3306.a4259"
            ]
        ]
    },
    {
        "id": "f4129709.ed8cf8",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "to flowmeter",
        "links": [
            "49d5bf61.c6fee"
        ],
        "x": 1095,
        "y": 2240,
        "wires": [],
        "l": true
    },
    {
        "id": "49d5bf61.c6fee",
        "type": "link in",
        "z": "a006c3c.49c7b4",
        "name": "",
        "links": [
            "f4129709.ed8cf8"
        ],
        "x": 100,
        "y": 220,
        "wires": [
            [
                "5689bd26.2bf284"
            ]
        ]
    },
    {
        "id": "1fb29f21.7291f1",
        "type": "modbus-queue-info",
        "z": "2db3774.f99f488",
        "name": "",
        "topic": "",
        "unitid": "17",
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "276147dc.e6e7f8",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 250,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "ac21f8c.0d00408",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 790,
        "y": 2140,
        "wires": [
            [
                "a064ee31.884e9"
            ]
        ]
    },
    {
        "id": "5cf76b7f.1bf4d4",
        "type": "modbus-queue-info",
        "z": "2db3774.f99f488",
        "name": "",
        "topic": "",
        "unitid": "97",
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "276147dc.e6e7f8",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 250,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "d15f0351.0dc62",
        "type": "modbus-queue-info",
        "z": "2db3774.f99f488",
        "name": "",
        "topic": "",
        "unitid": "37",
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "276147dc.e6e7f8",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 250,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "cc39cac7.c24b38",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Set SetPoint",
        "links": [
            "18405476.592f2c"
        ],
        "x": 1450,
        "y": 3160,
        "wires": [],
        "l": true
    },
    {
        "id": "88ef3306.a4259",
        "type": "function",
        "z": "ac69f322.1bb2c",
        "name": "Format Data",
        "func": "// this is where you define the legend for \n// the datasets\nvar title = \"Pump Duty Point\";\nvar legend1 = \"legend1\";\n\n// variables to be used to \nvar i, x, y, data1\ndata1 = flow.get('data1')||'';\n\nvar count = flow.get('count')||0;\ncount += 1;\nif (count > 998) {\n    count = 1;\n    data1 = '{x: 0,  y: 0},'; // Force the size of the\n} \n// store the value back\nflow.set('count',count);\n// make it part of the outgoing msg object\nmsg.count = count;\n\n// for dataset #1\n// this code generates one x/y point \n// between -100 and +100 and a random \n//size between 1 and 10\n//node.warn(\"db1=\"+data1);\nx = global.get('Flow')||0;\ny = global.get('head')||0;\n\ndata1 += \"{x: \"+x+\", y: \"+y+\"},\";\n//node.warn(\"db2=\"+data1);\n// this line removes the last comma to end the dataset\ndata1 = data1.replace(/^(.*),(.*?)$/, '$1')\n\n// Now we build msg.payload\nmsg.payload = { \"title\"   : title,\n                \"legend1\" : legend1,\n                \"data1\"   : data1,\n                };\ndata1 += \",\";\n\n//flow.set([\"data1\", \"data2\"], [data1, data2]);\nflow.set([\"data1\"], [data1]);\n\nreturn msg;\n\n// this code gets a random interger\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1430,
        "y": 140,
        "wires": [
            [
                "3069aa49.688026"
            ]
        ]
    },
    {
        "id": "3069aa49.688026",
        "type": "template",
        "z": "ac69f322.1bb2c",
        "name": "Format HTML",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<canvas id=\"bubble-chart\" width=\"90%\" height=\"90%\" margin=\"auto\"></canvas>\n\n<script>\nnew Chart(document.getElementById(\"bubble-chart\"), {\n    type: 'scatter',\n    data: {\n      labels: \"label\",\n      datasets: [\n        {\n          label: \"{{{payload.legend1}}}\",\n          backgroundColor: \"rgba(65, 72, 255, 1.0000)\",\n          borderColor: \"#000\",\n          fill: false,\n          showLine: false,\n          data: [\n            {{{payload.data1}}}\n\n          ]\n        }\n      ]\n    },\n    options: {\n        animation: false,\n        legend: {\n            display: false,\n            labels: {\n                fontColor: 'rgb(255, 255, 255)'\n            }\n        },\n    title: {\n        display: false,\n        text: '{{{payload.title}}}',\n        fontColor: 'rgb(255, 255, 255)'\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero:true,\n            fontColor: 'rgb(255, 255, 255,0.5)',\n            suggestedMax: 6,\n          },\n          gridLines: {\n            display: true,\n            drawBorder: true,\n            color: 'rgb(255, 255, 255,0.1)',\n        },\n          scaleLabel: {\n            display: true,\n            labelString: \"Head [m]\",\n            fontColor: 'rgb(255, 255, 255)',\n            \n          },\n         \n        }],\n        xAxes: [{ \n          ticks: {\n            beginAtZero:true,\n            fontColor: 'rgb(255, 255, 255,0.5)',\n            suggestedMax: 5,\n          },\n          gridLines: {\n            display: true,\n            drawBorder: true,\n            color: 'rgb(255, 255, 255,0.1)',\n        },\n          scaleLabel: {\n            display: true,\n            labelString: \"Flow [m\\u00B3/h]\",\n            fontColor: 'rgb(255, 255, 255)',\n            \n          }\n        }]\n      }\n    }\n});\n\n</script>\n",
        "output": "str",
        "x": 1500,
        "y": 200,
        "wires": [
            [
                "e05b0eb1.db3c5"
            ]
        ]
    },
    {
        "id": "e05b0eb1.db3c5",
        "type": "ui_template",
        "z": "ac69f322.1bb2c",
        "group": "38d14db9.3d4dd2",
        "name": "Scatter Plot",
        "order": 0,
        "width": "6",
        "height": "6",
        "format": "this will be ignored",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1490,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "cef7d60.0336128",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "data1",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "count",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f4fde460.a07658",
        "type": "debug",
        "z": "8e025641.d38868",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1700,
        "y": 2380,
        "wires": []
    },
    {
        "id": "e0337605.c6a948",
        "type": "traffic",
        "z": "8e025641.d38868",
        "name": "",
        "property_allow": "payload",
        "filter_allow": "valve",
        "ignore_case_allow": false,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "payload",
        "filter_stop": "pump",
        "ignore_case_stop": false,
        "negate_stop": false,
        "send_stop": false,
        "default_start": false,
        "differ": false,
        "x": 930,
        "y": 2180,
        "wires": [
            [
                "2a1ca63e.b3b5da"
            ]
        ]
    },
    {
        "id": "50c5117e.83fcc",
        "type": "switch",
        "z": "8e025641.d38868",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "valve",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pump",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 2100,
        "wires": [
            [
                "6624409e.9adad"
            ],
            [
                "59153e15.59cb4"
            ]
        ]
    },
    {
        "id": "bfcaabf4.2dbb08",
        "type": "ui_toast",
        "z": "8e025641.d38868",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 950,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "d01dc1c1.ae1c4",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Flowrate - FC3 33282",
        "func": "var fc=3;\nvar sa=33282;\nvar addresses=2;\nmsg.topic = \"SPV\"\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': addresses };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 2040,
        "wires": [
            [
                "89185a9e.ad01a8",
                "24d23591.c8396a"
            ]
        ]
    },
    {
        "id": "92dcfe4.73334",
        "type": "function",
        "z": "651c65ba.af2eec",
        "name": "Design Flow - FC 16 32798",
        "func": "var fc=6;\nvar sa=32789;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 37, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1680,
        "wires": [
            [
                "c59565b2.e748e8"
            ]
        ]
    },
    {
        "id": "10ba9c20.b90244",
        "type": "delay",
        "z": "651c65ba.af2eec",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 280,
        "y": 1580,
        "wires": [
            [
                "e7fd0e5c.956d4"
            ]
        ]
    },
    {
        "id": "e7fd0e5c.956d4",
        "type": "change",
        "z": "651c65ba.af2eec",
        "name": "100 %",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 274.5555419921875,
        "y": 1629.77783203125,
        "wires": [
            [
                "92dcfe4.73334"
            ]
        ]
    },
    {
        "id": "c4ecf8db.4c02a8",
        "type": "link out",
        "z": "651c65ba.af2eec",
        "name": "valve feedback",
        "links": [
            "d7cea06e.e2cb8",
            "5d28b042.1706f"
        ],
        "x": 1385,
        "y": 240,
        "wires": [],
        "l": true
    },
    {
        "id": "d7cea06e.e2cb8",
        "type": "link in",
        "z": "b066e7c5.874fa8",
        "name": "",
        "links": [
            "c4ecf8db.4c02a8"
        ],
        "x": 800,
        "y": 1300,
        "wires": [
            [
                "a516a52d.5e3d48"
            ]
        ]
    },
    {
        "id": "a516a52d.5e3d48",
        "type": "ui_chart",
        "z": "b066e7c5.874fa8",
        "name": "Valve Position",
        "group": "bb2dbcc9.07f63",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Valve Position",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1020,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "5d28b042.1706f",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "c4ecf8db.4c02a8"
        ],
        "x": 1135,
        "y": 860,
        "wires": [
            [
                "254ba8e6.24b308"
            ]
        ]
    },
    {
        "id": "254ba8e6.24b308",
        "type": "ui_chart",
        "z": "8e025641.d38868",
        "name": "Valve Position",
        "group": "8443a485.7acdd8",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Valve",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1355,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "b3d76cf4.03014",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Controller settings",
        "func": "var msg1 ={'payload' : {}}\nvar msg2 ={'payload' : {}}\nvar msg3 ={'payload' : {}}\n\nmsg1.payload = msg.payload.data[0]/10\nmsg2.payload = msg.payload.data[1]/10\n\nif(msg.payload.data[2]===0){\n    msg3.payload = \"Inverse\"\n}\nelse{\n    msg3.payload = \"Direct\"\n}\nreturn [msg1,msg2,msg3];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1980,
        "wires": [
            [
                "41ea40e6.68c41"
            ],
            [
                "996c1a35.a797f8"
            ],
            [
                "7ec69130.1d01e"
            ]
        ]
    },
    {
        "id": "41ea40e6.68c41",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Kp",
        "links": [
            "ac1a9afe.1a4628",
            "869d6543.6206b8"
        ],
        "x": 1270,
        "y": 1940,
        "wires": [],
        "l": true
    },
    {
        "id": "996c1a35.a797f8",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Ti",
        "links": [
            "fcfccc20.e9d55",
            "a1c0ed8b.bd48b"
        ],
        "x": 1270,
        "y": 1980,
        "wires": [],
        "l": true
    },
    {
        "id": "7ec69130.1d01e",
        "type": "link out",
        "z": "2db3774.f99f488",
        "name": "Direct",
        "links": [
            "2efa25ad.b29e7a",
            "daa183fc.1d8fe"
        ],
        "x": 1270,
        "y": 2020,
        "wires": [],
        "l": true
    },
    {
        "id": "b6dae729.d63798",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Kp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1990,
        "y": 760,
        "wires": []
    },
    {
        "id": "1425bb7e.e7d0b5",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1990,
        "y": 800,
        "wires": []
    },
    {
        "id": "d4b7547e.9faca8",
        "type": "ui_text",
        "z": "8e025641.d38868",
        "group": "5bc5e1ec.4bddf",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Mode",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1990,
        "y": 840,
        "wires": []
    },
    {
        "id": "ac1a9afe.1a4628",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "41ea40e6.68c41"
        ],
        "x": 1735,
        "y": 760,
        "wires": [
            [
                "b6dae729.d63798"
            ]
        ]
    },
    {
        "id": "fcfccc20.e9d55",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "996c1a35.a797f8"
        ],
        "x": 1735,
        "y": 800,
        "wires": [
            [
                "1425bb7e.e7d0b5"
            ]
        ]
    },
    {
        "id": "2efa25ad.b29e7a",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "7ec69130.1d01e"
        ],
        "x": 1735,
        "y": 840,
        "wires": [
            [
                "d4b7547e.9faca8"
            ]
        ]
    },
    {
        "id": "8e424068.6ba0a",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 100",
        "func": "var fc=6;\nvar sa=109;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 100,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "24c0e751.600d08",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 110",
        "func": "var fc=6;\nvar sa=110;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 180,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "40a7d3d1.25119c",
        "type": "function",
        "z": "2db3774.f99f488",
        "name": "Setup - FC6 111",
        "func": "var fc=6;\nvar sa=111;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 17, 'address': sa , 'quantity': 1 };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 240,
        "wires": [
            [
                "97be8ca3.66ade"
            ]
        ]
    },
    {
        "id": "d4824cef.c539a",
        "type": "debug",
        "z": "2db3774.f99f488",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 1940,
        "wires": []
    },
    {
        "id": "b36c09c3.b171e8",
        "type": "ui_numeric",
        "z": "8e025641.d38868",
        "name": "Kp value",
        "label": "Kp Value",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 14,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "step": "0.1",
        "x": 480,
        "y": 940,
        "wires": [
            [
                "e5a0ffcb.97161",
                "785d08ef.02ed18"
            ]
        ]
    },
    {
        "id": "7e9ccfcc.e475f",
        "type": "ui_numeric",
        "z": "8e025641.d38868",
        "name": "Ti value",
        "label": "Ti Value",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 15,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 480,
        "y": 1020,
        "wires": [
            [
                "2c488125.bc9f2e",
                "ab7e5ac.26e5ba8"
            ]
        ]
    },
    {
        "id": "e5a0ffcb.97161",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "scaling",
        "func": "msg.payload = msg.payload*10\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 900,
        "wires": [
            [
                "a811223.44d96e"
            ]
        ]
    },
    {
        "id": "2c488125.bc9f2e",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "scaling",
        "func": "msg.payload = msg.payload*10\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 980,
        "wires": [
            [
                "b44b4cae.7c6e2"
            ]
        ]
    },
    {
        "id": "a811223.44d96e",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Kp Set",
        "links": [
            "a7d55e0f.1ee58"
        ],
        "x": 845,
        "y": 900,
        "wires": []
    },
    {
        "id": "b44b4cae.7c6e2",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Ti Set",
        "links": [
            "a59ebb2a.d92da8"
        ],
        "x": 825,
        "y": 980,
        "wires": []
    },
    {
        "id": "a7d55e0f.1ee58",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "",
        "links": [
            "a811223.44d96e"
        ],
        "x": 1325,
        "y": 120,
        "wires": [
            [
                "8e424068.6ba0a"
            ]
        ]
    },
    {
        "id": "a59ebb2a.d92da8",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "",
        "links": [
            "b44b4cae.7c6e2"
        ],
        "x": 1315,
        "y": 180,
        "wires": [
            [
                "24c0e751.600d08"
            ]
        ]
    },
    {
        "id": "b0e1b816.4a68b8",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Controller Mode",
        "links": [
            "d48e0f6.55f7ff"
        ],
        "x": 1640,
        "y": 2780,
        "wires": [],
        "l": true
    },
    {
        "id": "5b34ede0.d0f784",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Inverse Controller",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 3000,
        "wires": [
            [
                "b0e1b816.4a68b8",
                "866e5f0e.b62fe",
                "6817cb2c.063c64"
            ]
        ]
    },
    {
        "id": "a70aa816.35ab78",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Direct Controller",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 2660,
        "wires": [
            [
                "4ac673c6.d40e8c",
                "b0e1b816.4a68b8",
                "6817cb2c.063c64"
            ]
        ]
    },
    {
        "id": "4ac673c6.d40e8c",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Constant Head",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 2700,
        "wires": [
            [
                "6d13db02.51d864",
                "3e8337c3.c37638"
            ]
        ]
    },
    {
        "id": "6d13db02.51d864",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "BMS ON and GO",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 2740,
        "wires": [
            [
                "32c3acf8.337714",
                "f70d1c06.5de01",
                "d8ab5d3d.8966a"
            ]
        ]
    },
    {
        "id": "f9b9e419.416fb8",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Setpoint",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "8000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 2820,
        "wires": [
            [
                "cc39cac7.c24b38"
            ]
        ]
    },
    {
        "id": "d8ab5d3d.8966a",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Disable FlowLimit",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 2780,
        "wires": [
            [
                "f9b9e419.416fb8",
                "3f5703fa.5ab35c"
            ]
        ]
    },
    {
        "id": "d48e0f6.55f7ff",
        "type": "link in",
        "z": "2db3774.f99f488",
        "name": "",
        "links": [
            "b0e1b816.4a68b8",
            "cf8469ac.2efa18"
        ],
        "x": 1285,
        "y": 240,
        "wires": [
            [
                "40a7d3d1.25119c"
            ]
        ]
    },
    {
        "id": "6e7b67e.169bf98",
        "type": "traffic",
        "z": "8e025641.d38868",
        "name": "",
        "property_allow": "payload",
        "filter_allow": "pump",
        "ignore_case_allow": false,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "payload",
        "filter_stop": "valve",
        "ignore_case_stop": false,
        "negate_stop": false,
        "send_stop": false,
        "default_start": true,
        "differ": false,
        "x": 850,
        "y": 2880,
        "wires": [
            [
                "5b34ede0.d0f784"
            ]
        ]
    },
    {
        "id": "1a41372d.070429",
        "type": "traffic",
        "z": "8e025641.d38868",
        "name": "",
        "property_allow": "payload",
        "filter_allow": "valve",
        "ignore_case_allow": false,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "payload",
        "filter_stop": "pump",
        "ignore_case_stop": false,
        "negate_stop": false,
        "send_stop": false,
        "default_start": false,
        "differ": false,
        "x": 850,
        "y": 2680,
        "wires": [
            [
                "a70aa816.35ab78"
            ]
        ]
    },
    {
        "id": "f3e6af03.fb1e2",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "",
        "func": "msg.payload = msg.payload/100\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2840,
        "wires": [
            [
                "e864dbd8.9e4c58"
            ]
        ]
    },
    {
        "id": "e57fe2da.d2a4a",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "3753d190.8334be",
            "94a56a65.a973b8"
        ],
        "x": 185,
        "y": 920,
        "wires": [
            [
                "b36c09c3.b171e8",
                "2b4db3f0.62b96c",
                "404bfcd2.c45ed4"
            ]
        ]
    },
    {
        "id": "be7f968e.69f518",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "5d2bf0b5.ab2ac",
            "789fb35.6e5a34c"
        ],
        "x": 195,
        "y": 980,
        "wires": [
            [
                "7e9ccfcc.e475f",
                "f3167073.aa489"
            ]
        ]
    },
    {
        "id": "2a599490.71513c",
        "type": "ui_switch",
        "z": "ac69f322.1bb2c",
        "name": "",
        "label": "Controller: Direct/Inverse",
        "tooltip": "",
        "group": "ab3a9e02.8ace9",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "0",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "1",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "cf8469ac.2efa18"
            ]
        ]
    },
    {
        "id": "cf8469ac.2efa18",
        "type": "link out",
        "z": "ac69f322.1bb2c",
        "name": "Controller Mode",
        "links": [
            "d48e0f6.55f7ff"
        ],
        "x": 720,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "210bfa83.5d4446",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Kp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2030,
        "y": 720,
        "wires": []
    },
    {
        "id": "c51b1a96.b93d08",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2030,
        "y": 760,
        "wires": []
    },
    {
        "id": "e2f23e0d.e266",
        "type": "ui_text",
        "z": "ac69f322.1bb2c",
        "group": "2635b728.9e6d88",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Mode",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2030,
        "y": 800,
        "wires": []
    },
    {
        "id": "869d6543.6206b8",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "41ea40e6.68c41"
        ],
        "x": 1775,
        "y": 720,
        "wires": [
            [
                "210bfa83.5d4446"
            ]
        ]
    },
    {
        "id": "a1c0ed8b.bd48b",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "996c1a35.a797f8"
        ],
        "x": 1775,
        "y": 760,
        "wires": [
            [
                "c51b1a96.b93d08"
            ]
        ]
    },
    {
        "id": "daa183fc.1d8fe",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "7ec69130.1d01e"
        ],
        "x": 1775,
        "y": 800,
        "wires": [
            [
                "e2f23e0d.e266"
            ]
        ]
    },
    {
        "id": "6817cb2c.063c64",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "controller mode ui",
        "links": [
            "5c756ee7.251f3"
        ],
        "x": 1660,
        "y": 2840,
        "wires": [],
        "l": true
    },
    {
        "id": "5c756ee7.251f3",
        "type": "link in",
        "z": "ac69f322.1bb2c",
        "name": "",
        "links": [
            "6817cb2c.063c64"
        ],
        "x": 195,
        "y": 60,
        "wires": [
            [
                "2a599490.71513c"
            ]
        ]
    },
    {
        "id": "a913fb5f.c3c538",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 180,
        "wires": [
            [
                "2a599490.71513c"
            ]
        ]
    },
    {
        "id": "2b4db3f0.62b96c",
        "type": "delay",
        "z": "8e025641.d38868",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 440,
        "y": 900,
        "wires": [
            [
                "e5a0ffcb.97161"
            ]
        ]
    },
    {
        "id": "f3167073.aa489",
        "type": "delay",
        "z": "8e025641.d38868",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 440,
        "y": 980,
        "wires": [
            [
                "2c488125.bc9f2e"
            ]
        ]
    },
    {
        "id": "ba4468bf.562b38",
        "type": "ui_ui_control",
        "z": "8e025641.d38868",
        "name": "",
        "events": "all",
        "x": 1460,
        "y": 80,
        "wires": [
            [
                "c9586a01.e6f078"
            ]
        ]
    },
    {
        "id": "c9586a01.e6f078",
        "type": "debug",
        "z": "8e025641.d38868",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 80,
        "wires": []
    },
    {
        "id": "5b7085a3.b2e2dc",
        "type": "ui_button",
        "z": "8e025641.d38868",
        "name": "Pump mode",
        "group": "3c1be052.4e291",
        "order": 5,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Pump",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"Simulations_Valve_Position\"]}}",
        "payloadType": "json",
        "topic": "",
        "x": 490,
        "y": 80,
        "wires": [
            [
                "ba4468bf.562b38",
                "57d4ea7b.d2fca4",
                "2c4da08a.ea684",
                "af282768.405fc8",
                "af2c185c.74ac88"
            ]
        ]
    },
    {
        "id": "57b9b1a0.68d4c",
        "type": "ui_button",
        "z": "8e025641.d38868",
        "name": "Valve Mode",
        "group": "3c1be052.4e291",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "PICV",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "{\"group\":{\"show\":[\"Simulations_Valve_Position\"],\"hide\":[\"Simulations_Control_Simulation_Kp_Value\",\"Simulations_Control_Simulation_Ti_Value\"]}}",
        "payloadType": "json",
        "topic": "",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "ba4468bf.562b38",
                "eb9e8a59.aa31b8",
                "b50b37e2.2074c8",
                "a6ca9ced.d86eb",
                "ff06f064.89e1b"
            ]
        ]
    },
    {
        "id": "49ff9553.79b14c",
        "type": "ui_button",
        "z": "8e025641.d38868",
        "name": "start sim",
        "group": "3c1be052.4e291",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "start",
        "payloadType": "str",
        "topic": "",
        "x": 220,
        "y": 1960,
        "wires": [
            [
                "37a240a8.2a56b",
                "1a41372d.070429",
                "6e7b67e.169bf98"
            ]
        ]
    },
    {
        "id": "57d4ea7b.d2fca4",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#707372",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "57b9b1a0.68d4c"
            ]
        ]
    },
    {
        "id": "2c4da08a.ea684",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#11497B",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 20,
        "wires": [
            [
                "5b7085a3.b2e2dc"
            ]
        ]
    },
    {
        "id": "b50b37e2.2074c8",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#707372",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "5b7085a3.b2e2dc"
            ]
        ]
    },
    {
        "id": "eb9e8a59.aa31b8",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#11497B",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 280,
        "wires": [
            [
                "57b9b1a0.68d4c"
            ]
        ]
    },
    {
        "id": "3ab048c9.6e9548",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Pump/Valve",
        "links": [
            "4d495d24.918b94"
        ],
        "x": 975,
        "y": 200,
        "wires": []
    },
    {
        "id": "af282768.405fc8",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "pump",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "pump",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 180,
        "wires": [
            [
                "3ab048c9.6e9548"
            ]
        ]
    },
    {
        "id": "a6ca9ced.d86eb",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "valve",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "valve",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 220,
        "wires": [
            [
                "3ab048c9.6e9548"
            ]
        ]
    },
    {
        "id": "4d495d24.918b94",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "Pump/Valve",
        "links": [
            "3ab048c9.6e9548"
        ],
        "x": 215,
        "y": 2180,
        "wires": [
            [
                "50c5117e.83fcc",
                "e0337605.c6a948",
                "9e9734bb.1248b8",
                "1a41372d.070429",
                "6e7b67e.169bf98"
            ]
        ]
    },
    {
        "id": "9f5840e2.7eea5",
        "type": "ui_button",
        "z": "8e025641.d38868",
        "name": "",
        "group": "3c1be052.4e291",
        "order": 18,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Pump Status",
        "tooltip": "",
        "color": "",
        "bgcolor": "#9d0027",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 1150,
        "y": 280,
        "wires": [
            [
                "e82ef047.e73f8"
            ]
        ]
    },
    {
        "id": "e82ef047.e73f8",
        "type": "function",
        "z": "8e025641.d38868",
        "name": "",
        "func": "var bookkeeper = flow.get(\"bookkeeper\") \nif (bookkeeper == true){\n    msg.payload = {\"group\":{\"hide\":[\"Simulations_Pump_Status\"]}}\n    flow.set(\"bookkeeper\",false)\n}\nelse if(bookkeeper == false) {\n    msg.payload = {\"group\":{\"show\":[\"Simulations_Pump_Status\"]}}\n    flow.set(\"bookkeeper\",true)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 280,
        "wires": [
            [
                "ba4468bf.562b38",
                "4b8eb644.504c08"
            ]
        ]
    },
    {
        "id": "4b8eb644.504c08",
        "type": "debug",
        "z": "8e025641.d38868",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 260,
        "wires": []
    },
    {
        "id": "523bd9e.67d1b28",
        "type": "inject",
        "z": "8e025641.d38868",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "98e9afc7.7d3a1",
                "2c4da08a.ea684",
                "57d4ea7b.d2fca4"
            ]
        ]
    },
    {
        "id": "98e9afc7.7d3a1",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "pump",
        "rules": [
            {
                "t": "set",
                "p": "bookkeeper",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 280,
        "wires": [
            [
                "9f5840e2.7eea5"
            ]
        ]
    },
    {
        "id": "857e8963.000408",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "",
        "group": "806379db.c33df8",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Pump Status",
        "tooltip": "",
        "color": "",
        "bgcolor": "#9d0027",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 670,
        "y": 1720,
        "wires": [
            [
                "ce73a345.7207f"
            ]
        ]
    },
    {
        "id": "ce73a345.7207f",
        "type": "function",
        "z": "ac69f322.1bb2c",
        "name": "",
        "func": "var bookkeeper = flow.get(\"bookkeeper\") \nif (bookkeeper == true){\n    msg.payload = {\"group\":{\"hide\":[\"MAGNA3_Dashboard_Status\"]}}\n    flow.set(\"bookkeeper\",false)\n}\nelse if(bookkeeper == false) {\n    msg.payload = {\"group\":{\"show\":[\"MAGNA3_Dashboard_Status\"]}}\n    flow.set(\"bookkeeper\",true)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1720,
        "wires": [
            [
                "cc17c7c6.d368b8"
            ]
        ]
    },
    {
        "id": "adce63cd.d90a5",
        "type": "inject",
        "z": "ac69f322.1bb2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 1720,
        "wires": [
            [
                "829673c2.d46f",
                "5d91e34f.59cd0c"
            ]
        ]
    },
    {
        "id": "829673c2.d46f",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "bookkeeper",
        "rules": [
            {
                "t": "set",
                "p": "bookkeeper",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 1720,
        "wires": [
            [
                "857e8963.000408"
            ]
        ]
    },
    {
        "id": "cc17c7c6.d368b8",
        "type": "ui_ui_control",
        "z": "ac69f322.1bb2c",
        "name": "",
        "events": "all",
        "x": 1020,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "a144eaba.3e2278",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "",
        "group": "806379db.c33df8",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Pump Info",
        "tooltip": "",
        "color": "",
        "bgcolor": "#9d0027",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 660,
        "y": 1780,
        "wires": [
            [
                "5b8edbf9.310744"
            ]
        ]
    },
    {
        "id": "5b8edbf9.310744",
        "type": "function",
        "z": "ac69f322.1bb2c",
        "name": "",
        "func": "var bookkeeper = flow.get(\"bookkeeper2\") \nif (bookkeeper == true){\n    msg.payload = {\"group\":{\"hide\":[\"MAGNA3_Dashboard_Info\"]}}\n    flow.set(\"bookkeeper2\",false)\n}\nelse if(bookkeeper == false) {\n    msg.payload = {\"group\":{\"show\":[\"MAGNA3_Dashboard_Info\"]}}\n    flow.set(\"bookkeeper2\",true)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1780,
        "wires": [
            [
                "cc17c7c6.d368b8"
            ]
        ]
    },
    {
        "id": "5d91e34f.59cd0c",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "bookkeeper",
        "rules": [
            {
                "t": "set",
                "p": "bookkeeper2",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 1780,
        "wires": [
            [
                "a144eaba.3e2278"
            ]
        ]
    },
    {
        "id": "aac2d1ec.6689",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "BMS",
        "group": "806379db.c33df8",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "BMS",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "x": 490,
        "y": 560,
        "wires": [
            [
                "32c89a66.b32156",
                "6437b.9eee3c858",
                "2a671378.1f358c"
            ]
        ]
    },
    {
        "id": "fe820342.fb80e",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "Local",
        "group": "806379db.c33df8",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Local",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "",
        "x": 510,
        "y": 640,
        "wires": [
            [
                "32c89a66.b32156",
                "d86741fa.07e67",
                "2491361e.bc550a"
            ]
        ]
    },
    {
        "id": "f7062394.422cd",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "Stop Pump",
        "group": "806379db.c33df8",
        "order": 5,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Stop",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "",
        "x": 530,
        "y": 940,
        "wires": [
            [
                "dd510898.341cd8",
                "525f16bf.bd2c08",
                "2052187a.6a0ba8"
            ]
        ]
    },
    {
        "id": "70fdb431.66a5cc",
        "type": "ui_button",
        "z": "ac69f322.1bb2c",
        "name": "Start Pump",
        "group": "806379db.c33df8",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "x": 530,
        "y": 840,
        "wires": [
            [
                "dd510898.341cd8",
                "20dd88c6.1b6e48",
                "4ec82e79.464a7"
            ]
        ]
    },
    {
        "id": "2a671378.1f358c",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#707372",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 560,
        "wires": [
            [
                "fe820342.fb80e"
            ]
        ]
    },
    {
        "id": "6437b.9eee3c858",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#11497B",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 480,
        "wires": [
            [
                "aac2d1ec.6689"
            ]
        ]
    },
    {
        "id": "2491361e.bc550a",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#707372",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 640,
        "wires": [
            [
                "aac2d1ec.6689"
            ]
        ]
    },
    {
        "id": "d86741fa.07e67",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#11497B",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 700,
        "wires": [
            [
                "fe820342.fb80e"
            ]
        ]
    },
    {
        "id": "20dd88c6.1b6e48",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#11497B",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 780,
        "wires": [
            [
                "70fdb431.66a5cc"
            ]
        ]
    },
    {
        "id": "525f16bf.bd2c08",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#11497B",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1000,
        "wires": [
            [
                "f7062394.422cd"
            ]
        ]
    },
    {
        "id": "4ec82e79.464a7",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#707372",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 860,
        "wires": [
            [
                "f7062394.422cd"
            ]
        ]
    },
    {
        "id": "2052187a.6a0ba8",
        "type": "change",
        "z": "ac69f322.1bb2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#707372",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 940,
        "wires": [
            [
                "70fdb431.66a5cc"
            ]
        ]
    },
    {
        "id": "d09b7a42.f769f8",
        "type": "switch",
        "z": "ac69f322.1bb2c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 440,
        "wires": [
            [
                "6437b.9eee3c858",
                "2a671378.1f358c"
            ],
            [
                "d86741fa.07e67",
                "2491361e.bc550a"
            ]
        ]
    },
    {
        "id": "26181a9.b3b52e6",
        "type": "switch",
        "z": "ac69f322.1bb2c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 780,
        "wires": [
            [
                "20dd88c6.1b6e48",
                "4ec82e79.464a7"
            ],
            [
                "525f16bf.bd2c08",
                "2052187a.6a0ba8"
            ]
        ]
    },
    {
        "id": "55b13c46.91dd34",
        "type": "inject",
        "z": "8e025641.d38868",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "b36c09c3.b171e8"
            ]
        ]
    },
    {
        "id": "e4886d95.afcbf",
        "type": "inject",
        "z": "8e025641.d38868",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "8",
        "payloadType": "num",
        "x": 170,
        "y": 840,
        "wires": [
            [
                "7e9ccfcc.e475f"
            ]
        ]
    },
    {
        "id": "ce316651.519608",
        "type": "ui_text_input",
        "z": "ef4d3c17.ae27b",
        "name": "Error Code input",
        "label": "Error Code",
        "tooltip": "",
        "group": "26881754.b529d8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "d0d3d53e.68f368"
            ]
        ]
    },
    {
        "id": "92bb3ba6.d1a6a8",
        "type": "template",
        "z": "8e025641.d38868",
        "name": "pump mode",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p style=\"max-width:500px\">\n<img src=\"/pump.jpg\" alt=\"intro\" style=\"width:100%;height:auto;\">\n</p>",
        "output": "str",
        "x": 770,
        "y": 2120,
        "wires": [
            [
                "bfcaabf4.2dbb08"
            ]
        ]
    },
    {
        "id": "59153e15.59cb4",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Change to Pump Mode",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2120,
        "wires": [
            [
                "92bb3ba6.d1a6a8"
            ]
        ]
    },
    {
        "id": "6624409e.9adad",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Change to PICV Mode",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2060,
        "wires": [
            [
                "3187452e.34726a"
            ]
        ]
    },
    {
        "id": "3187452e.34726a",
        "type": "template",
        "z": "8e025641.d38868",
        "name": "valvemode",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p style=\"max-width:500px\">\n<img src=\"/valve.jpg\" alt=\"intro\" style=\"width:100%;height:auto;\">\n</p>",
        "output": "str",
        "x": 770,
        "y": 2060,
        "wires": [
            [
                "bfcaabf4.2dbb08"
            ]
        ]
    },
    {
        "id": "c8580ba5.f0d028",
        "type": "template",
        "z": "8e025641.d38868",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n\n<body style=\"background-color:blue\">\n<h1 style=\"max-width:600px\">\n    How to use this dashboard\n</h1>\n<p style=\"max-width:600px\">\n<img src=\"/help_simulation.png\" alt=\"intro\" style=\"width:100%;height:auto;\" >\n</p>\n\n<p style=\"max-width:600px\">\n  <ol style=\"max-width:600px\">\n      <li>Select either the pump or PICV mode</li>\n      <li>Occupancy can be changed on the fly, to change the load on the system</li>\n      <li>When ready, press start and the simulation will begin and you can follow the progress on the different plots</li>\n      <li>If you which to stop or restart the simulation, press the Reset</li>\n      <li>You can toggle the view of the Pump Status view by clicking this button</li>\n  </ol> \n</p>\n\n\n</body>\n</html>\n",
        "output": "str",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "346fdfe1.142f"
            ]
        ]
    },
    {
        "id": "785d08ef.02ed18",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Kp",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "ab7e5ac.26e5ba8",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Ti",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "ff06f064.89e1b",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Kp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 100,
        "wires": [
            [
                "7e3b44ef.a5290c",
                "94a56a65.a973b8"
            ]
        ]
    },
    {
        "id": "7e3b44ef.a5290c",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Ti",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "8",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 140,
        "wires": [
            [
                "789fb35.6e5a34c"
            ]
        ]
    },
    {
        "id": "af2c185c.74ac88",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Kp",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Kp",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 20,
        "wires": [
            [
                "9162db0.f91d128",
                "94a56a65.a973b8"
            ]
        ]
    },
    {
        "id": "9162db0.f91d128",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "Ti",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Ti",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 60,
        "wires": [
            [
                "789fb35.6e5a34c"
            ]
        ]
    },
    {
        "id": "94a56a65.a973b8",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Kp enable/disable",
        "links": [
            "e57fe2da.d2a4a"
        ],
        "x": 1220,
        "y": 20,
        "wires": [],
        "l": true
    },
    {
        "id": "789fb35.6e5a34c",
        "type": "link out",
        "z": "8e025641.d38868",
        "name": "Ti enable/disable",
        "links": [
            "be7f968e.69f518"
        ],
        "x": 1210,
        "y": 60,
        "wires": [],
        "l": true
    },
    {
        "id": "404bfcd2.c45ed4",
        "type": "debug",
        "z": "8e025641.d38868",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 860,
        "wires": []
    },
    {
        "id": "f86635c1.b63258",
        "type": "ui_numeric",
        "z": "8e025641.d38868",
        "name": "Occupancy numeric",
        "label": "Occupancy",
        "tooltip": "",
        "group": "3c1be052.4e291",
        "order": 10,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} %",
        "min": 0,
        "max": "100",
        "step": "5",
        "x": 840,
        "y": 1220,
        "wires": [
            [
                "527f5617.17e358",
                "b584fcd8.da1c2",
                "1fe43506.98c34b"
            ]
        ]
    },
    {
        "id": "3949c879.102088",
        "type": "ui_numeric",
        "z": "b066e7c5.874fa8",
        "name": "P value",
        "label": "P Value",
        "tooltip": "",
        "group": "8dd78c30.ffe35",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "step": "0.5",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "e2cbad31.d758c"
            ]
        ]
    },
    {
        "id": "fdc93a49.ba3728",
        "type": "ui_numeric",
        "z": "b066e7c5.874fa8",
        "name": "I Value",
        "label": "I Value",
        "tooltip": "",
        "group": "8dd78c30.ffe35",
        "order": 6,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 410,
        "y": 380,
        "wires": [
            [
                "4d29f6a2.4a6e58"
            ]
        ]
    },
    {
        "id": "e2cbad31.d758c",
        "type": "change",
        "z": "b066e7c5.874fa8",
        "name": "P part",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "prop_band",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 320,
        "wires": [
            [
                "ba498411.be17f8"
            ]
        ]
    },
    {
        "id": "ba498411.be17f8",
        "type": "link out",
        "z": "b066e7c5.874fa8",
        "name": "valve_PID",
        "links": [
            "e18a4ff5.46186"
        ],
        "x": 1020,
        "y": 320,
        "wires": [],
        "l": true
    },
    {
        "id": "4d29f6a2.4a6e58",
        "type": "change",
        "z": "b066e7c5.874fa8",
        "name": "I part",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "t_integral",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 380,
        "wires": [
            [
                "ba498411.be17f8"
            ]
        ]
    },
    {
        "id": "bd696bbd.1244c8",
        "type": "inject",
        "z": "b066e7c5.874fa8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "3949c879.102088"
            ]
        ]
    },
    {
        "id": "3420380b.3d45d8",
        "type": "inject",
        "z": "b066e7c5.874fa8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "fdc93a49.ba3728"
            ]
        ]
    },
    {
        "id": "e18a4ff5.46186",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "ba498411.be17f8"
        ],
        "x": 765,
        "y": 2280,
        "wires": [
            [
                "2a1ca63e.b3b5da"
            ]
        ]
    },
    {
        "id": "e19b9ab2.5dac48",
        "type": "link in",
        "z": "8e025641.d38868",
        "name": "",
        "links": [
            "8c809dae.e3377"
        ],
        "x": 1075,
        "y": 500,
        "wires": [
            [
                "a184cc5.85b0a3"
            ]
        ]
    },
    {
        "id": "1fe43506.98c34b",
        "type": "change",
        "z": "8e025641.d38868",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "occupancy",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 1320,
        "wires": [
            []
        ]
    }
]